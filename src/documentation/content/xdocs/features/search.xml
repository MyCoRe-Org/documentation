<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "http://apache.org/forrest/dtd/document-v12.dtd">
<document>

<header>
  <title>Suche in Metadaten und Volltext</title>
</header>

<body>

    <section>
      <title>Suchfunktionen</title>
      <p>
        MyCoRe unterstützt die kombinierte Suche in den Metadaten von Objekten (Titel, Autor etc.),
        in den Metadaten von Dateien (Änderungsdatum, Dateigröße etc.) und in den Volltexten von Dateien.
        Eine MyCoRe Anwendung sucht dabei nicht direkt in den Daten von Objekten und Dateien, sondern in daraus abgeleiteten
        Suchfeldern. Die Abbildung von Metadaten auf Suchfelder erfolgt über eine Konfigurationsdatei. So wird z. B.
        das XML-Element <code>/metadata/titles/title</code> auf ein Suchfeld <code>title</code> abgebildet.
      </p>
      <img src="images/searchfield.png" alt="searchfield" title="searchfield.xml"/>
      <p class="klein"><strong>Abbildung 1:</strong> Auszug aus der Datei searchfields.xml</p>
      <p>
        Dabei können auch komplexe Suchanfragen mit booleschen Ausdrücken (und/oder/nicht), Platzhaltern und Suchoperatoren
        gestellt werden. Der Datentyp eines Suchfeldes (ID, Name, Text, Zahl, Datum etc.) bestimmt die bei der Suche
        einsetzbaren Operatoren (z.B. Phrasensuche, Trunkierung, &lt;, &gt;, ...).
      </p>
      <img src="images/mcrql.png" alt="MCR Query Language" title="Suchausdruck in MCRQueryLanguage"/>
      <p class="klein"><strong>Abbildung 2:</strong> Expertensuche mit der MyCoRe-Anfragesprache</p>
      <p>
        Die Suche in MyCoRe ist auf Basis von
        <link href="http://lucene.apache.org" title="Apache Lucene Home">Apache Lucene</link>
        realisiert. Obwohl auch andere Implementierungen denkbar sind, ist dies
        die zur Zeit einzige Implementierung der MyCoRe Suche, die für den Produktionseinsatz sinnvoll ist.
        Über Lucene durchlaufen indizierte Texte ggf. verschiedene Normalisierungsschritte wie Stammwortreduktion (Stemming) und
        Umlautnormalisierung.
      </p>
    </section>
    <section>
      <title>Suchmasken und Trefferlisten</title>
      <p>
        MyCoRe Suchmasken sind frei konfigurierbar, von einfachen Ein-Feld-Suchformularen über komplexere, qualifiziertere
        Suchmasken bis hin zu frei formulierbaren Experten-Abfragen in der MyCoRe Query Language (MCRQL). Suchmasken können
        selbst erstellt oder aus einer Konfiguration von Suchfeldern automatisch generiert werden.
      </p>
      <img src="images/searchmask.png" alt="Suchmaske" title="DuEPublico Suchmaske"/>
      <p class="klein"><strong>Abbildung 3:</strong> Beispiel einer Suchmaske</p>
      <p>
        Trefferlisten sind auf- oder absteigend nach mehreren Feldern beliebig sortierbar. Die ursprüngliche Suche kann angezeigt
        ("Sie haben gesucht nach: ...") oder noch einmal verfeinert werden (Rückkehr zum Suchformular mit Anpassung der
        Suchparameter).
      </p>
      <p>
        Auch eine verteilte Suche über mehrere Server ist möglich und intern über Web Services Schnittstellen
        realisiert. Auf diesem Wege können auch Legacy-Systeme mittels einer eigenen Implementierung dieser Schnittstellen auf
        Java-Basis integriert werden.
      </p>
    </section>
    <section>
      <title>Datei-Inhalte durchsuchen</title>
      <p>
        Für die Volltextsuche wird der Inhalt von Textdateien über konfigurierbare Filter extrahiert. Derzeit sind Implementierungen
        für HTML, XML, TXT, OpenOffice Formate und PDF-Dateien enthalten.
      </p>
      <p>
        MyCoRe kann aus bestimmten Dateitypen zusätzliche Metadaten extrahieren und diese ebenfalls durchsuchbar machen. Derzeit
        sind Implementierungen für die Extraktion bzw. Suche in EXIF-Metadaten von JPEG-Grafiken (Aufnahmedatum etc.),
        in ID3-Metadaten von MP3-Audiodateien (Titel, Interpret, Länge etc.)
        und in Metadaten von PDF-Dokumenten (Seitenzahl, Autor etc.) verfügbar.
      </p>
      <p>
        MyCoRe kann als Content gespeicherte XML-Dateien qualifiziert durchsuchen. Bei entsprechender Konfiguration könnten z. B.
        die XML-Strukturen einer manifest.xml Datei eines SCORM-Lernpaketes, oder METS-Metadaten eines Digitalisates durchsucht werden.
      </p>
    </section>

</body>
</document>