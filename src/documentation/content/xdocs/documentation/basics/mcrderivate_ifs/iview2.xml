<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">

<document>
  <header>
    <title>Die iView2-Komponente</title>
    <abstract>
      Diese Komponente bereitet Bilder, die in Derivaten abgelegt werden auf, damit diese im MyCoRe-eigenen
      Bildbetrachter dargestellt werden können.
    </abstract>
  </header>

  <body>

    <!-- Include required JS files -->
    <script type="text/javascript" src="/documentation/skin/shCore.js"></script>
    <!--
    At least one brush, eg. XML. You need to include a brush for every
    language you want to highlight
    -->
    <script type="text/javascript" src="/documentation/skin/shBrushBash.js"></script>
    <script type="text/javascript" src="/documentation/skin/shBrushXml.js"></script>
    <script type="text/javascript" src="/documentation/skin/shBrushJava.js"></script>

    <section>
      <title>Die Integration der Bildbetrachter-Komponente</title>
      <p>
        MyCoRe bietet einen komfortablen Bildbetrachter, um Dateien verschiedener Formate anzuzeigen. Dazu wird die
        Komponente <code>iview2</code> aus dem MyCoRe-Kern verwendet. Diese bindet dann wiederum den
        <a href="site:image_viewer">MyCoRe-Viewer</a> ein. Der iView2 erstellt (falls notwendig) die Kacheln und
        ermöglicht die Einbindung des Viewers in die Anwendung.
      </p>
      <p>
        Eine Übersicht der verfügbaren Kommandos finden Sie im Abschnitt
        <a href="site:cmd_iview_ug21">Kommandos zur Arbeit mit dem ImageViewer</a>.
      </p>
      <p>
        Der Bildbetrachter ist in der MIR-Anwendung bereits in die Detailansicht des MyCoRe-Objekttyps
        <code>mods</code> integriert. Ist der Bildbetrachter deaktiviert oder sind keine
        Kacheln vorhanden, wird dieser einfach nicht dargestellt. Für die Darstellung
        ist die <a href="https://fisheye.mycore.de/browse/MyCoRe-SVN/maven/mir/trunk/mir-module/src/main/resources/xsl/metadata/mir-viewer.xsl?r=trunk"
        >mir-viewer.xsl</a> verantwortlich.
      </p>
    </section>


    <section>
      <title>Komponente IView2 – API zur Bildbearbeitung</title>
      <p>
        Die IView2-Komponente befindet sich im MyCoRe-Kern und bietet eine API um Bilddaten in MyCoRe abzuspeichern,
        performant zu laden und gegebenenfalls zu verändern (Skalierung).
      </p>
      <h4>Bilder speichern</h4>
      <p>
        Für jedes (unterstützte) Bildformat wird beim Einstellen der Datei in MyCoRe ein asynchroner Kachelvorgang
        gestartet. Dabei wird das Bild in Kacheln à 256x256 Pixel zerlegt und so lange herunterskaliert und erneut gekachelt,
        bis das Thumbnail (x&lt;=256 und y&lt;=256) erstellt ist. Alle so entstanden Kacheln und Auflösungen werden für die
        spätere
        Verwendung gespeichert. Durch diese redundante Speicherung der Bilddaten verdreifacht sich schlimmsten Falls (wenn original
        JPEG ist) die
        Datenmenge. Bei unkomprimierten TIFF-Bildern liegt der Overhead bei ca. 10-15 Prozent.
      </p>
      <h4>Bilder ausgeben</h4>
      <p>
        Bilder können über den Image-Viewer angezeigt werden oder in festen Auflösungsstufen ausgegeben werden.
        Beim Image-Viewer wird entsprechend der Ausgabegröße wird entschieden, welche Kacheln für die Darstellung
        verwendet werden.
      </p>
      <h4>Schnittstellen</h4>
      <p>
        Hier nun eine Übersicht der Möglichkeiten die verschiedenen Kacheln/Darstellungen in die eigene
        Anwendung einzubinden. Der jeweilige Pfad muss dann im Zuge der Anwendungsentwicklung im gewünschten
        Stylesheet an der richtigen Stelle platziert werden.
      </p>
      <dl>
        <dt>Thumbnails (immer PNG 256x256 mit transparenten Rahmen):</dt>
        <dd>
          <pre class="brush: shell; gutter: false;">/servlets/MCRThumbnailServlet/{derivateID}/{pfadZumBild}</pre>
        </dd>
        <dt>Thumbnails original (immer JPEG und mit Kantenlänge &lt;=256):</dt>
        <dd>
          <pre class="brush: shell; gutter: false;">/servlets/MCRTileServlet/{derivateID}/{pfadZumBild}/0/0/0.jpg</pre>
        </dd>
        <dt>Zusammengefügte Bilder in verschieden Auflösungen (immer JPEG):</dt>
        <dd>
          <pre class="brush: shell; gutter: false;">/servlets/MCRTileCombineServlet/{Auflösung}/{derivateID}/{pfadZumBild}</pre>
          Auflösung:
          <ul style="list-style-type:none;">
            <li>"MIN" - 256 &lt; Kantenlänge &lt;=512</li>
            <li>"MID" - 512 &lt; Kantenlänge &lt;= 1024</li>
            <li>"MAX" - 1024 &lt; Kantenlänge &lt;= 2048</li>
          </ul>
          pfadZumBild: relativer Pfad innerhalb des Derivats inklusive der original Endung (z.B.: .tiff)
          <br />
          <br />
        </dd>

        <dt>Einbinden des Bildbetrachters mittels XSLT (kompatibel mit IView1):</dt>
        <dd>
          <pre class="brush: xml; gutter: false;">
            &lt;xsl:call-template name="derivateView"&gt;
            &lt;xsl:with-param name="derivateID" select="{derivateID}" /&gt;
            &lt;/xsl:call-template&gt;</pre>
        </dd>

        <dt>IView2-Metadaten eines Bildes:</dt>
        <dd>
          <pre class="brush: shell; gutter: false;">/servlets/MCRTileServlet/{derivateID}/{pfadZumBild}/imageinfo.xml</pre>
          ergibt:
          <pre class="brush: xml; gutter: false;">
            &lt;imageinfo derivate="{derivateID}"path="/{pfadZumBild}"tiles="{AnzahlAllerKacheln}"
            width="{BreiteInPixeln}"height="{HöheInPixel}"zoomLevel="{maximalerZoomlevel}"//&gt;</pre>
        </dd>
      </dl>
    </section>

 <!-- Finally, to actually run the highlighter, you need to include this JS on your page -->
 <script type="text/javascript">
     SyntaxHighlighter.all()
 </script>
  </body>
</document>
