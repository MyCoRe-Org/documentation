<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">

<document>
  <header>
    <title>Nützliche Klassen</title>
    <abstract>Funktionsprinzipien und Implementierungen von Kernkomponenten</abstract>
  </header>
<body>
    <section>
      <title>MCRTextResolver</title>
      <p>
      Ab MyCoRe 2.1 gibt es die neue Klasse MCRTextResolver. Diese ermöglicht es frei definierbare Variablen
      und MyCoRe-Properties (im folgenden unter dem Begriff Variablen zusammengefasst) in Texten aufzulösen.
      Hierzu ein kleines Beispiel:
      </p>

      <source class="code">
  <![CDATA[
  „Ich programmiere in {MCR.NameOfProject}.“]]>
      </source>

      <p>
      Würde man diesen Text innerhalb des DocPortal Projekts mit dem MCRTextResolver auflösen, entsteht
      folgender Text: „Ich programmiere in DocPortal“. Inhalte in geschweiften Klammern werden vom
      MCRTextResolver als Variablen erkannt und entsprechend aufgelöst.
      </p>
      <p class="fett">Bedingungen – eckige Klammern []</p>
      <p>
      Eckige Klammern ermöglichen es Variablenbedingung zu definieren. Der gesamte Inhalt in eckigen Klammern
      wird nur dann verwendet, wenn alle enthaltenen Variablen nicht null und nicht leer sind. Als Beispiel soll
      „[Mein Nachname ist {lastname}].“ dienen. Der gesamte Inhalt wird nur aufgelöst, wenn die Variable lastname
      existiert. Andernfalls wird der Inhalt ignoriert.
      </p>
      <p>
      Eine valide Datums Angabe könnte damit zum Beispiel folgendermaßen realisiert werden: „{year}[-{month}[-{day}]]“.
      </p>
      <p class="fett">Escaping - \</p>
      <p>
      Der MCRTextResolver unterstützt Escaping um vordefinierte Symbole wie {}[] zu maskieren.
      </p>
      <p class="fett">API</p>
      <p>
      Der Zugriff über die API ist denkbar einfach:
      </p>

      <source class="code">
  <![CDATA[
  MCRTextResolver resolver=new MCRTextResolver();
  String result=resolver.resolve("Ich programmiere in {MCR.NameOfProject}.");]]>
      </source>

      <p>
      Variablen können entweder mit Hilfe einer Map an den Konstruktor übergeben, oder per
      addVariable(name, value) gesetzt werden.
      </p>

      <source class="code">
  <![CDATA[
  Map<String, String> vars=new Hashtable<String, String>();
  vars.put("firstname", "Max");
  vars.put("lastname", "Mustermann");
  MCRTextResolver resolver=new MCRTextResolver(vars);
  resolver.addVariable("birthdate", "1977-04-04");
  String result=resolver.resolve("Name: {firstname} {lastname}; Geburtstag: {birthdate}");]]>
      </source>

    </section>

</body>
</document>

