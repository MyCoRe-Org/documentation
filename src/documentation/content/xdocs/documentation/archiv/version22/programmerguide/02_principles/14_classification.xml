<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">

<document>
  <header>
    <title>Klassifikationen</title>
    <abstract>Funktionsprinzipien und Implementierungen von Kernkomponenten</abstract>
  </header>
  <body>
   <section>
    <title>Klassifikationsbrowser</title>
    <p>
      Mit dem Klassifikationsbrowser bietet MyCoRe die Möglichkeit über Klassifikationen zu navigieren und so zu den
      zugehörigen Dokumenten zu gelangen. Für jede Klassifikation die über einen Link im Navigationsmenü erreicht werden
      soll, muss eine Seite im content-Verzeichnis angelegt werden (siehe z.B. im docportal-Modul unter
      <code>web/content/main/classifications</code>).
    </p>
    <h4>Beispiel für Browsen nach Einrichtung</h4>
    <p>
      Der Klassifikationsbrowser für die Klassifikation Dokumente nach Einrichtung (z.B. bei einer lokalen
      Beispiel-Installation) kann dann durch folgende URL aufgerufen werden:
    </p>
    <pre class="brush: shell; gutter: false;">http://localhost:8291/content/main/classifications/origin.xml</pre>
    <p>
      Dabei wird das XML-Tag <code>&lt;classificationbrowser&gt;</code> inkl. seiner Attribute über das XSLT-Stylesheet
      <code>classificationBrowser.xsl</code> ausgewertet. Folgende Attribute sind möglich:
    </p>
    <pre class="brush: xml;"><![CDATA[
  <classificationbrowser
    classification="{ClassificationID}"
    category="{CategoryID to start with, optional}"
    sortby="{id|label, optional sort order of categories}"
    objecttype="{MCRObject type, optional}"
    field="{search field for category queries in this classification}"
    restriction="{additional query expression}"
    parameters="{additional MCRSearchServlet parameters}"
    addParameter="{any additional request parameters to forward to classification browser servlet}"
    countresults="{true|false, default false, whether to execute queries to count results}"
    countlinks="{true|false, default false, whether to count links to each category}"
    emptyleaves="{true|false, when false and counting activated, skip empty leaves}"
    adduri="{true|false, whether to include URI from classification data}"
    adddescription="{true|false, whether to include description from category label}"
    class="{CSS class, default is 'classificationBrowser'}"
    style="{XSL.Style to use, default is classificationBrowserData.xsl}"
  />]]></pre>
    <p>
      Für das im docportal-Modul enthaltene Beispiel der Einrichtungen wurde die folgende Konfiguration verwendet:
    </p>
    <pre class="brush: xml;"><![CDATA[
  <classificationbrowser
    classification="DocPortal_class_00000002"
    objecttype="document"
    field="origin"
    countresults="true"
    parameters="numPerPage=10"
    style="docportal"
  />]]></pre>

  <p>
    Da diese Konfiguration direkt als XML im section-Tag der Seitenspezifikation stattfindet, kann
    der Klassifikationsbrowser in beliebigen Seitenkontext eingebunden werden und muss nicht, wie im
    Beispiel, allein stehen. Durch die Variabilität ist es also möglich, Klassifikationen nach
    Belieben in XML-Dokumente einzubetten.
  </p>
  <p>
    In Abbildung 2.14.1 ist ein Beispiel zu sehen, wie sich der Klassifikationsbrowser auf der Webseite
    präsentieren kann. Einzelne Kategorien können aus- bzw. eingeklappt werden, so lange sie noch
    Unterkategorien enthalten. Die Anzahl der enthaltenen Dokumente kann dargestellt werden und es
    besteht auch die Möglichkeit leere Kategorien auszublenden.
  </p>

  <div style="text-align:center;margin:10px 0;">
    <img src="images/klassifikationsbrowser.png" alt="Klassifikationsbrowser" style="margin:5px;padding:10px;border:1px solid gray;" /><br />
    <span class="klein"><strong>Abbildung 2.14.1:</strong> Klassifikationsbrowser in einer MyCoRe-Anwendung</span>
  </div>

  <section>
    <title>Die Parameter im Detail</title>
    <h4>classification="{ClassificationID}"</h4>
    <p>Dieser Parameter gibt die Klassifikations-ID an, zu der der Browser erstellt werden soll. Dieser Parameter ist Pflicht.</p>
    <pre class="brush: shell; gutter: false;">
  Beispiel:

  classification="DocPortal_class_00000002"
    </pre>
    <p>
      Hinter der Klassifikation mit der ID <code>DocPortal_class_00000002</code> verbirgt sich in diesem Fall eine Liste von Einrichtungen,
      die zur MyCoRe-Community gehören. Dies ist eine Beispielklassifikation aus dem docportal-Modul.
    </p>

    <h4>objecttype="{MCRObject type}"</h4>
    <p>
      Über den Parameter <code>objecttype</code> wird die Auswahl der MyCoRe-Objekttypen gesteuert, die bei der Abrage
      der Dokumente berücksichtigt werden sollen. Der angegebene Typ muss in der Datei <code>mycore.properties</code>
      über den Parameter <code>MCR.Metadata.Type.[Doctype]=[true|Dokumententypliste]</code> definiert sein. Als möglicher
      Wert, kann jede Angabe aus MCR.Metadata.Type.* verwendet werden. Dieser Parameter ist optional.
    </p>
    <pre class="brush: shell; gutter: false;">
  Beispiel:

  objecttype="document"
    </pre>
    <p>
      Es wird <code>MCR.Metadata.Type.document</code> in der Datei <code>mycore.properties</code> herausgesucht, der z.B.
      mit <code>MCR.Metadata.Type.document=true</code> belegt ist. Somit werden bei dieser Klassifikation alle Dokumente vom
      MyCoRe-Objekttyp <code>document</code> berücksichtigt.
    </p>
    <p>
      Alternativ könnte man in einer etwas komplexeren Anwendung so den logischen MyCoRe-Objekttyp
      <code>objecttype="alldocs"</code> spezifizieren, der dann auf die echten Objekttypen z.B.
      <code>MCR.Metadata.Type.alldocs=document,article,codice,disshab,professorum,portrait</code> abgebildet wird und alle
      Dokumente, die einem Typ aus der Typliste entsprechen, im Klassifikationsbrowser berücksichtigt.
    </p>

    <h4>style="{XSL.Style to use}"</h4>
    <p>
      Legt das Stylesheet fest, mit dem das erzeugte XML-Document transformiert wird. Dabei setzt sich der Name des
      auszuwählenden Stylesheets aus der Default-Datei <code>classificationBrowserData.xsl</code> und dem Style zusammen.
      Dieser Parameter ist optional.
    </p>
    <pre class="brush: shell; gutter: false;">
  Beispiel:

  style="docportal"
    </pre>
    <p>Es wird die Datei <code>classificationBrowserData-docportal.xsl</code> zur Transformation verwendet.</p>

    <h4>emptyleaves="{true|false}"</h4>
    <p>
      Klassifikationen besitzen im Allgemeinen eine baumartige Struktur. Zu jeder im Baum dargestellten Kategorie wird
      die Anzahl der damit klassifizierten Objekte ermittelt und (je nach Stylesheet) dargestellt. Kategorien die keine
      Objekte referenzieren (Anzahl der Dokumente=0) können durch die Option <code>emptyleaves</code> ausgeblendet werden.
      Mögliche Werte sind <code>true|false</code>, default ist true - es werden also alle Kategorien inkl. leerer angezeigt.
      Dieser Parameter ist optional.
    </p>
    <pre class="brush: shell; gutter: false;">
  Beispiel:

  emptyleaves="false"
    </pre>
    <p>Zeigt nur Kategorien der Klassifikation an, die auch Dokumente enthalten.</p>

    <h4>restriction="{additional query expression}"</h4>
    <p>
      Es ist möglich für die referenzierten MyCoRe-Objekte eine Restriktion zu setzen um die Auswahl durch weitere
      Such-Kriterien einzuschränken. Es werden dann nur die Objekte berücksichtigt, die allen Kriterien genügen.
      Dieser Parameter ist optional.
    </p>
    <pre class="brush: shell; gutter: false;">
  Beispiel:

  ToDo
    </pre>
    <p>
      ToDo: Beschreibung des Beispiels.
    </p>

    <h4>category="{CategoryID to start with}"</h4>
    <p>
      Da einige Klassifikationen schnell komplex und ein enstprechender Baum unübersichtlich werden kann, ist es möglich
      eine Kategorie-ID zu spezifizieren, an deren Stelle der darzustellende Klassifikationsbaum beginnen soll. Dieser
      Parameter ist optional.
    </p>
    <pre class="brush: shell; gutter: false;">
  Beispiel:

  category="Unis"
    </pre>
    <p>
      Mit dieser Restriktion werden nur die Dokumente berücksichtigt, die auch der Klassifikation
      <code>DocPortal_class_00000002</code> mit der Kategorie <code>Unis</code> genügen. Das sind im Beispiel alle
      Dokumente, die an Einrichtungen, die auch Hochschulen sind, publiziert worden.
    </p>

    <h4>field="{search field for category queries in this classification}"</h4>
    <p>
      Hier wird das bei der Ausführung der Suchanfrage zu durchsuchende Suchfeld festgelegt, das in
      <code>searchfields.xml</code> spezifiziert werden muss.
    </p>
    <pre class="brush: shell; gutter: false;">
  Beispiel:

  field="origin"
    </pre>
    <p>
      Es wird das origin-Suchfeld als Suchparameter genutzt.
    </p>

    <h4>adddescription="{true|false}"</h4>
    <p>
      Die Beschreibung, die optional beim Erstellen der Klassifikation für Kategorien angegeben sein können, werden
      im Baum mit dargestellt. Mögliche Werte sind <code>true|false</code>. Default ist <code>false</code>, der Parameter
      ist optional.
    </p>
    <pre class="brush: shell; gutter: false;">
  Beispiel:

  adddescription="true"
    </pre>

  </section>
</section>

<section>
    <title>Klassifikationseditor </title>
    <p>
    Mit dem Klassifikationseditors als Webinterface, gibt es neben der Kommandozeilen-Schnittstelle eine weitere
    Möglichkeit, Klassifikationen im System zu erzeugen, zu bearbeiten und zu löschen.
    Im Unterschied zum ersten Klassifikationseditor bietet die neue Version eine vollständig überarbeitete, auf
    JavaScript basierende Oberfläche.
    </p>

    <h4>Konfiguration</h4>
    <p>
    Der Aufruf erfolgt bei einer lokalen Beispiel-Installation über folgende URL:<br />
    <code>http://localhost:8291/modules/classeditor/classificationEditor.xml</code>
    </p>
    <p>
    Weiterhin können verschiedene XSL-Parameter übergeben werden. Die Parameter starten alle mit XSL.classeditor.
    Zum Beispiel:<br />
    <code>http://localhost:8291/modules/classeditor/classificationEditor.xml?XSL.classeditor.debug=true&amp;XSL.classeditor.showId=true</code>
    </p>
    <table>
      <tr>
        <th>Parameter</th>
        <th>Werte</th>
        <th>Beschreibung</th>
      </tr>
      <tr>
        <td>debug</td>
        <td>true | false</td>
        <td>Stellt den Debug-Modus ein. Damit wird die ausführliche statt die komprimierte JS-Datei geladen.</td>
      </tr>
      <tr>
        <td>class</td>
        <td>Klassifikations-ID <br /> z.B. DocPortal_class_1</td>
        <td>Gibt die Klassifikation an welche geladen werden soll. Wird dieser Parameter weggelassen werden alle Klassifikationen angezeigt.</td>
      </tr>
      <tr>
        <td>categ</td>
        <td>Kategorie-ID</td>
        <td>Die ID einer Kategorie welche geladen werden soll. Dieser Parameter wird ignoriert wenn keine Klassifikations-ID angegeben wurde.</td>
      </tr>
      <tr>
        <td>showId</td>
        <td>true | false</td>
        <td>IDs werden angezeigt und können bearbeitet werden.</td>
      </tr>
    </table>
    <p>
    Unter <code>http://localhost:8291/modules/classeditor/classificationEditorDiag.xml</code> kann
    zusätzlich ein Dialog basierender Klassifikationseditor aufgerufen werden.
    </p>

    <h4>ACL</h4>
    <p>
    Um Anwendern die Möglichkeit zu geben mit dem Klassifikationseditor zu arbeiten müssen vorher
    entsprechende Rechte vergeben werden. Da der Klassifikationseditor auf Jersey basiert wird als
    ID der Klassenpfad der Resource verwendet. Das Zugriffsrecht entspricht der aufgerufenen Methode
    kombiniert mit der HTTP Anfrage Methode (GET, POST, HEAD...).
    </p>
    <pre class="brush: shell; gutter: false;">
  Speichern:
  Objekt ID: org.mycore.frontend.classeditor.resources.MCRClassificationEditorResource
  Zugriffsrecht: /classifications/save_POST
    </pre>
    <pre class="brush: shell; gutter: false;">
  Import:
  Objekt ID: org.mycore.frontend.classeditor.resources.MCRClassificationEditorResource
  Zugriffsrecht: /classifications/import_POST
    </pre>

    <h4>Anpassung</h4>
    <p>
    Gestartet wird der Editor mithilfe der JavaScript Klasse classeditor.Editor. Als einziger Parameter wird ein JSON-Objekt erwartet welches die Einstellungen für den Editor bereithält. Die genauen Attribute können aus der Klassenbeschreibung entnommen werden.
    </p>
    <p>
Um den Editor einzubinden sollten die Templates der XSL-Datei classificationEditorBase.xsl verwendet werden. Die Templates sind modular gestaltet um jeden Entwickler selbst entscheiden zu lassen was er benötigt. Wird  das dojo-Framework z.B. schon im Layoutprozess eingebunden muss classeditor.includeDojoJS nicht mehr aufgerufen werden. Der Entwickler muss dann natürlich dafür Sorge tragen das alle notwendigen dojo und dijit Resourcen verfügbar sind.
    </p>
    <p>
Ein Beispiel in dem das dojo-Framework und der Klassifikationseditor erst per Anwenderklick geladen wird findet sich im Zeitschriftenserver der ThULB:
svn.thulb.uni-jena.de/viewvc/jportal2/trunk/jportal_mcr_module/src/main/resources/web/classification/ClassificationEditor.js
    </p>

    <h4>Hinweise</h4>
    <p>
Um alle css Formatierungen korrekt anzuzeigen muss der Body-Tag die Klasse des aktuellen dojo-Themes erhalten, in der Regel 'claro'. Dazu sollte die JavaScript  Methode updateBodyTheme() vor dem laden des Klassifikationseditors aufgerufen werden.
    </p>
    <p>Die Handhabung des Klassifikationseditors ist im <a href="site:classif_editor_ug22"
        >UserGuide</a> beschrieben.</p>
</section>
</body>
</document>

