<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">

<document>
  <header>
    <title>KlassifikationsBrowser</title>
    <abstract>Funktionsweise des KlassifikationsBrowser</abstract>
  </header>
<body>

   <!-- Include required JS files -->
   <script type="text/javascript" src="/documentation/skin/shCore.js"></script>
   <!--
    At least one brush, eg. XML. You need to include a brush for every
    language you want to highlight
    -->
   <script type="text/javascript" src="/documentation/skin/shBrushXml.js"></script>
   <script type="text/javascript" src="/documentation/skin/shBrushBash.js"></script>
   <script type="text/javascript" src="/documentation/skin/shBrushJava.js"></script>

 <section>
   <title>Das Metadatenmodell</title> 
   <p>
   Die zu speichernden Daten des Beispiels teilen sich in unserem Modell in Metadaten und digitale Objekte. Dies gilt 
   auch für die vom Anwender entwickelten Applikationen. Digitale Objekte sind Gegenstand des Abschnitts ’IFS und 
   Content Store’. Unter Metadaten verstehen wir in MyCoRe alle beschreibenden Daten des Objektes, die extern 
   hinzugefügt, separat gespeichert und gesucht werden können. Dem gegenüber stehen Daten welche die digitalen Objekte 
   selbst mitbringen. In diesem Abschnitt werden nur erstere behandelt. 
   </p>
   <p>
   Um die Metadaten besser auf unterschiedlichen Datenspeichern ablegen zu können, wurde ein System von XML-Strukturen 
   entwickelt, das es gestattet, neben den eigentlichen Daten wie Titel, Autor usw. auch Struktur- und 
   Service-Informationen mit abzulegen. Die eigentlichen Nutzerdaten sind wiederum typisiert, was deren 
   speicherunabhängige Aufzeichnung erheblich vereinfacht. Es steht dem Entwickler einer Anwendung jedoch frei, hier bei 
   Bedarf weitere hinzuzufügen. Im Folgenden soll nun der Aufbau der Metadatenobjekte im Detail beschrieben werden. Zum 
   Verständnis der MyCoRe-Beispielanwendung sei hier auch auf den vorigen Abschnitt verwiesen. Die Metadaten werden 
   komplett in XML erfasst und verarbeitet. Für die Grundstrukturen und Standardmetadatentypen werden seitens MyCoRe 
   bereits XMLSchema-Dateien mitgeliefert. 
   </p>
   
   <section>
   <title>XML-Syntax eines Metadatenobjektes</title>
   <source class="code">
<![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<mycoreobject
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="....xsd"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    ID="..."
    label="..." >
 <structure>
 ...
 </structure>
 <metadata xml:lang="de">
 ...
 </metadata>
 <service>
 ...
 </service>
</mycoreobject>]]></source>

   <p>
   Die oben gezeigte Syntax stellt den Rahmen eines jeden Metadaten-Objektes dar. Diese Struktur ist immer gleich und 
   muss so eingehalten werden.
   </p>
   <ul>
   <li>Für xsi:noNamespaceSchemaLocation ist das entsprechende XMLSchema-File des Metadatentyps anzugeben 
   (document.xsd)</li>
   <li>Die ID ist die eindeutige MCRObjectID.</li>
   <li>Der label ist ein kurzer Text-String, der bei administrativen Arbeiten an der Datenbasis das Identifizieren 
   einzelner Datensätze erleichtern soll. Er kann maximal 256 Zeichen lang sein.</li>
   <li>Innerhalb der XML-Datenstruktur gibt es die Abschnitte structure, metadata und service zur Trennung von 
   Struktur-, Beschreibungs- und Wartungsdaten. Diese Tag-Namen sind reserviert und dürfen NICHT anderweitig verwendet 
   werden!</li>
   </ul>
   </section>

   <section>
   <title>Syntax des XML-Knotens structure</title>
   <p>
   Im XML-Knoten structure sind alle Informationen über die Beziehung des Metadatenobjektes zu anderen Objekten abgelegt. 
   Es werden derzeit die folgenden XML-Daten unter diesem Knoten abgelegt. Die Tag-Namen parents/parent, children/child 
   und derobjects/derobject sind reserviert und dürfen NICHT anderweitig verwendet werden! Alle Sub-Knoten haben einen 
   Aufbau wie für MCRMetaLinkID beschrieben.
   </p>
   <p>
   In parents wird ein Link zu einem Elternobjekt gespeichert, sofern das referenzierende Objekt Eltern hat. Ob dies der 
   Fall ist, bestimmt die Anwendung. Das Tag dient der Gestaltung von Vererbungsbäumen und kann durch den Anwender 
   festgelegt werden. Siehe auch <a href="site:appdev_2_1">Programmer Guide</a>, Abschnitt 
   Vererbung. Die Werte für xlink:title und xlink:label werden beim Laden der Daten automatisch ergänzt.
   </p>
   <p>
   Die Informationen über die children hingegen werden durch das MyCoRe-System beim Laden der Daten automatisch erzeugt 
   und dürfen nicht per Hand geändert werden, da sonst das Gesamtsystem nicht mehr konsistent ist. Werden die Metadaten 
   eines Kindes oder eines Baumes von Kindern gelöscht, so wird in diesem Teil des XML-Knotens der Eintrag durch die 
   Software entfernt.
   </p>
   <p>
   Dasselbe gilt auch für den XML-Unterknoten <code>derobjects</code>. In diesem Bereich werden alle Verweise auf die an 
   das Metadatenobjekt angehängten digitalen Objekte gespeichert. Jeder Eintrag verweist mittels einer Referenz auf ein 
   Datenobjekt vom Typ mycorederivate, wie es im nachfolgenden Abschnitt ’IFS und Content Store’ näher erläutert ist.
   </p>
   <source class="code">
<![CDATA[<structure>
  <parents class="MCRMetaLinkID">
    <parent xlink:type="locator" xlink:href="...mcr_id..." />
  </parents>
  <children class="MCRMetaLinkID">
    <child xlink:type="locator" xlink:href="...mcr_id..." 
        xlink:label="..." xlink:title="..." />
    ...
  </children>
  <derobjects class="MCRMetaLinkID">
    <derobject xlink:type="locator" xlink:href="...mcr_id..." 
        xlink:label="..." xlink:title="..." />
    ...
  </derobjects>
</structure>]]></source>
   </section>

   <section>
   <title>Syntax des XML-Knotens metadata</title>
   <p>
   Der Abschnitt metadata des MyCoRe-Metadatenobjektes nimmt alle Beschreibungsdaten des eigentlichen Datenmodells auf. 
   Diese werden ihrerseits in vordefinierten Datentyp-Strukturen mit festgelegter Syntax abgelegt. Die Liste der 
   Einzelelemente und die Reihenfolge der Typen ist dabei quasi beliebig in Anordnung und Länge. Wichtig ist nur, dass 
   alle Datentypen bestimmte gemeinsame Eigenschaften haben. Es ist auch jederzeit möglich, weitere Typen den Projekten 
   der Anwender hinzuzufügen (siehe dazu <a href="site:appdev_2_1">MyCoRe Programmer Guide</a>).
   </p>
   <p>
   Die Metadaten bestehen aus einer Ansammlung von Informationen rund um das multimediale Objekt. Vorrangig wird dieser 
   Teil in der Suche abgefragt. Jedes Metadatum (auch Metadaten-Tag) enthält im class Attribut den Namen des MCRMeta-Typs 
   bzw. der gleichnamigen MCRMeta-Java Klasse. Daneben gibt es noch ein Attribut heritable, in dem festgelegt wird, ob 
   diese Metadaten vererbbar sein sollen. Es sind jeweils die booleschen Werte true oder false möglich. Die mit der 
   Vererbung verbundenen Mechanismen sind in dieser Dokumentation weiter hinten beschrieben. 
   </p>
   <p>
   Für MyCoRe wurden einige Basismetadatentypen festgelegt, mit denen die Mehrzahl der bisher in Betracht kommenden 
   Anwendungen gelöst werden können. Die einzelnen Daten treten dabei als Liste auf, in denen mehrere Elemente des 
   gleichen Typs erscheinen können, beispielsweise ein Titel in verschiedenen Sprachen. Jedes Listenelement hat wiederum 
   per Default ein type Attribut und eine gemäß W3C spezifizierte Sprache im Attribut xml:lang. Die Angabe der Sprache 
   im Tag metadata ist für alle eingeschlossenen Metadatentypen der Default-Wert. Die Liste der aktuell unterstützten 
   Sprach-Codes entnehmen Sie bitte der Java-Quelldatei 
   </p>
   <code class="code">~/mycore/sources/org/mycore/common/MCRDefaults.java</code>
   <p>
   Für interne Zwecke wurde ein weiteres Attribut inherited eingeführt. Dieses ist NICHT durch den Anwender zu verändern! 
   Es wird gesetzt, wenn das betreffende Metadatum von einem Elternteil geerbt wurde (siehe Vererbung). Diese 
   Information ist für die Datenpräsentation sehr hilfreich. 
   </p>
   
   <source class="code">
<![CDATA[<metadata xml:lang="...">
  <... class="MCRMeta..." heritabel="...">
   ...
  </...>
  ...
</metadata>]]></source>

   <p>
   Für das MyCoRe-Beispiel mit einem Dublin Core Datenmodell werden bereits einige Metadatentypen verwendet, welche dem 
   MyCoRe-Kern beigefügt sind. Die Syntax der einzelnen Typen wird in den nachfolgenden Absätzen genau beschrieben.
   </p>
   </section>
   </section>
 
   
   <!-- Finally, to actually run the highlighter, you need to include this JS on your page -->
   <script type="text/javascript">
       SyntaxHighlighter.all()
   </script>
</body>
</document>