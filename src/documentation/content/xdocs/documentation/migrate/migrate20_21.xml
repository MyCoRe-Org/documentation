<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">

<document>
  <header>
    <title>Migrationsanleitung von 2.0 auf 2.1</title>
    <abstract>
      Die wichtigste Neuerung von 2.0 auf 2.1 aus Sicht der Anwendungs-Migration ist
      die Verwendung von Maven. Mit Maven holt sich die Anwendung alle notwendigen
      Bibliotheken in den jeweils angegebenen Versionen selbst. Auch MyCoRe wird als
      eine solche Bibliothek eingebunden und muss nun nicht mehr mit heruntergeladen
      und kompiliert werden.
    </abstract>
  </header>
  <body>

      <note label="Hinweis">Die Migrationsanleitung geht von MyCoRe 2.0-fixes oder
      höher als Ausgangsbasis aus.</note>


    <section id="start">
      <title>Allgemeine Schritte zur Anwendungsmigration</title>
      <p>
      Die eigene Anwendung muss auf den Codestand des Release 2.1 gebracht
      werden. Dies kann am besten mit Hilfe der aktuellen DocPortal-Version
      realisiert werden. Da jede Anwendung verschieden ist, und mehr oder
      weniger stark von DocPortal abweicht, kann an dieser Stelle nicht im
      Detail auf die jeweilige Vorgehensweise eingegangen werden. Es wird
      jedoch auf wichtige Änderungen hingewiesen, um Anhaltspunkte für die
      eigene Migration zu geben. Bei Fragen kann die Community am besten
      jeweils direkt helfen - einfach mal nachfragen!
      </p>

      <section>
        <title>Umstellung auf Maven</title>
        <p>Für die Umstellung auf Maven muss auf Anwendungsseite nicht viel
        getan werden. Relevant wird dies vor allem, wenn für die eigene Anwendung auch
        Anpassungen am MyCoRe-Kern gemacht wurden. Da MyCoRe nun via Maven als mycore.jar
        eingebunden wird, muss hier ein anderer Weg beschritten werden, um diese Anpassungen
        einzupflegen. Fragen Sie hierzu am besten direkt auf der Mailingliste nach.</p>
        <p>Als Vorlage für die eigene Anwendung ist DocPortal 2.1-fixes zu verwenden.
        Um die eigene Anwendung Maven-fähig zu machen, sind folgende Schritte notwendig:
        </p>
        <ol>
          <li>altes lib-Verzeichnis löschen und aus neuer DocPortal-Version übernehmen
              (enthält nur noch <code>maven-ant-tasks-2.1.1.jar</code>)</li>
          <li><code>pom.xml.template</code> aus <code>docportal/config</code> in das
              config-Verzeichnis der eigenen Anwendung übernehmen und nach pom.xml
              kopieren - hier können später eigene Anpassungen vorgenommen werden</li>
          <li>aktuelle <code>build.xml</code> aus docportal übernehmen und ggf. wieder
              an eigenen Build-Prozess anpassen</li>
          <li>mit dem Aufruf <code>ant resolve</code> wird nun Maven angestossen und
              holt alle in der <code>pom.xml</code> angegebenen notwendigen Bibliotheken
              (inkl. der mycore.jar) - dies kann beim ersten Aufruf mehrere Minuten
              dauern</li>
        </ol>
      </section>
      <section>
        <title>Modularisierung - zweite Runde</title>
        <p>Im Modul-Verzeichnis von DocPortal 2.1-fixes befinden sich nun neben dem
        Anwendungsmodul <code>docportal</code> weitere Module, deren Bedeutung hier kurz
        aufgelistet wird:
        </p>
        <table>
          <caption>Modulverzeichnis docportal/modules</caption>
          <tr><th>Modul</th><th>Beschreibung</th></tr>
          <tr><td>common</td><td>enthält Stylesheets, Skripte, Code und XML-Dateien, die für
                                 alle Anwendungen, unabhängig vom speziellen Datenmodell oder
                                 Layout relevant sind</td></tr>
          <tr><td>docportal</td><td>alle anwendungsspezifischen Dateien - üblicherweise durch
                                 eigene Anwendung zu ersetzen</td></tr>
          <tr><td>maven</td><td>ist zur Erstellung von eigenen Anwendungsmodulen, z.B. wie IView2;
                                es bietet also eine zusätzliche Ebene um jar-Dateien zu kopieren</td></tr>
          <tr><td>myliwi</td><td>Beispielmodul als Vorlage für eine mögliche Erweiterung der
                                 eigenen Anwendung auf Basis von DocPortal</td></tr>
          <tr><td>sampleusers</td><td>Beispielnutzer, wie sie in DocPortal verwendet werden, können
                                 entsprechend durch eigene Nutzer ersetzt bzw. als Vorlage
                                 genutzt werden</td></tr>
        </table>
        <p>Im Zuge dieser stärkeren Auftrennung ist auch die <code>searchfields.xml</code> modularisiert worden.
           Die <code>searchfields.xml</code> wurde aufgeteilt in Suchfelder für Metadaten und Derivate und sind
           nun im Verzeichnis <code>modules/docportal/config</code> zu finden. Auf diese Art können
           für jedes Modul weitere Suchfelder definiert werden. Ein Beispiel dafür bietet das
           myliwi-Modul.</p>
        <p>Zur Anpassung der eigenen Anwendung an diese fein-granularere Modulstruktur empfehlen wir das
           Modulverzeichnis von DocPortal 2.1-fixes zu übernehmen und die eigenen Dateien entsprechend
           des docportal-Modules als Vorlage im eigenen Anwendungsmodul abzulegen.</p>
      </section>
      <section>
        <title>Weitere Schritte</title>
        <p>Seit dem letzten Release wurde vor allem viel im MyCoRe-Kern überarbeitet. Dadurch ändern sich
           teilweise auch Schnittstellen. Ein vollständiger Überblick kann an dieser Stelle leider nicht
           gegeben werden. Sollten Dinge nach der Umstellung nicht mehr funktionieren, bitten wir um
           Rückmeldung an die MyCoRe-User-Liste. Wir ergänzen die Punkte dann an dieser Stelle.</p>
        <p>Bereits bekannte nötige Anpassungen sind:</p>
        <dl>
          <dt>Bei Benutzung des xsl-Parameters: <strong>CurrentGroups</strong></dt>
          <dd>dieser existiert mehr nicht, stattdessen ist die xsl-Funktion isCurrentUserInRole() zu
              verwenden. Dazu muss <code>xmlns:mcrxsl="xalan://org.mycore.common.xml.MCRXMLFunctions"</code>
              in (documents).xsl definiert sein. Beispiel:
              <code>xsl:if test="mcrxsl:isCurrentUserInRole('AdminGroup')"</code></dd>
        </dl>
      </section>
    </section>

    <section>
      <title>Datenmigration</title>
    <p>
      Es gibt zwei Möglichkeiten die Daten einer bestehenden Anwendung zu migrieren. Läuft
      die MyCoRe-Anwendung als WAR im Webserver, kann das Update via Kommandozeile
      eingespielt und erst später die Anwendung selbst auf Version 2.1 und somit den Zugriff
      auf die migrierten Daten aktualisiert werden (offline).
    </p>

    <p>
      Wird keine WAR-Datei genutzt oder sind viele Daten zu migrieren und während des
      Migrationsvorganges soll die Anwendung nicht nur lesend ("read only") nutzbar sein,
      ist die Online-Migration eine Alternative.
    </p>

      <section id="offline">
        <title>Offline-Migration</title>
        <p>
          Während die 2.0er-Web-Anwendung läuft wird via Kommandozeile der Datenbestand
          auf 2.1 aktualisiert. Dazu muss in den <code>mycore.private.properties</code> der
          Eintrag <code>MCR.Components.Exclude "migration20-21"</code> entfernt werden,
          damit die Migrations-Kommandos verfügbar sind. Die Anwendung danach wie gehabt bauen
          (<code>ant create.jar create.scripts create.webapp</code>).
        </p>

        <p>
          Nun kann die MyCoRe-Kommandozeile (CLI) aufgerufen und die Migrationskommandos
          genutzt werden. Dort kann die Web-Anwendung in den
          Nur-Lese-Modus versetzt werden:
        </p>
        <pre class="brush: xml;gutter: false;">set website read only Datenmigration wird aktuell durchgeführt</pre>
      <p>
          Im nächsten Schritt, kann die Datenmigration gestartet werden:
        </p>
        <pre class="brush: xml;gutter: false;">migrate xmltable</pre>
        <p>
          Dies kann je nach Datenbestand einige Zeit dauern! Wenn das Kommando erfolgreich
          abgeschlossen wurde, kann nun auch die Webanwendung aktualisiert werden (neu
          erstelltes WAR einspielen). Zum Abschluss der Migration kann man, wie im
          <a href="#final">letzten Abschnitt</a> beschrieben, aufräumen.
        </p>
      </section>

      <section id="online">
        <title>Online-Migration</title>
        <p>
          Die Online-Migration erfolgt wie die Offline-Migration, nur mit folgenden
          Unterschieden:
          <br />
          In der <code>mycore.private.properties</code> muss das Kommentarzeichen vor folgender
          Anweisung entfernt werden:
        </p>
        <pre class="brush: xml;gutter: false;">#MCR.Metadata.Store.DefaultClass=org.mycore.datamodel.MCRMigratingXMLStore</pre>
        <p>
          Damit werden Metadaten, sowohl in der Datenbank als auch im IFS gesucht
          und ggf. migriert (auf den IFS-Store mit Versionierung).
        </p>

        <p>
          Diese Migration kann durch den Befehl <code>migrate xmltable</code>
          beschleunigt werden, der dann viele Warnungen erzeugt. Diese können in dem Fall
          ignoriert werden. Sind alle Daten migriert, befinden sich selbige im IFS2 und
          man kann das Property wieder deaktivieren.
        </p>
      </section>


      <section id="final">
        <title>Abschluss</title>
        <p>
          Nach der Migration kann man bei <code>MCR.Components.Exclude</code> wieder
          <code>"migration20-21"</code> eintragen, die Anwendung neu bauen und starten und dann
          in der Datenbank die Tabelle <code>MCRXMLTABLE</code> löschen.
        </p>
        <p>
          Weiterhin muss im "data"-Verzeichnis der Anwendung das "ehcache"-Verzeichnis
          gelöscht werden, weil mit Version 2.1 eine neuere Version als Second-Level-Cache
          benutzt wird, die mit dem alten Cache-Format Probleme hat und Warnungen erzeugt.
        </p>
      </section>
    </section>

    <section>
      <title>Integration des neuen Bildbetrachters (IView2)</title>
      <p>Im Gegensatz zur ersten Version des Bildbetrachters, bietet die Version 2
      keine Option zum Deaktivieren des Image-Caches mehr an. Es werden für alle Bilder
      Kacheln angelegt, auf deren Basis der deutlich schnellere und funktional umfangreichere
      Bildbetrachter arbeitet. Damit der neue Bildbetrachter genutzt werden kann,
      muss dieser aktiviert und die bereits erfassten Bilder neu gekachelt werden.</p>
      <section>
        <title>Vorbereitung</title>
        <p>
          Damit die IView2-Komponente von MyCoRe zur Verfügung steht, muss der folgende
          Abschnitt in der pom.xml (zu finden im config-Verzeichnis der Anwendung) vorhanden
           sein:
         </p>
      <pre class="brush: xml;"><![CDATA[
      <dependencies>
        ...
        <dependency>
          <groupId>org.mycore</groupId>
          <artifactId>iview2-preview</artifactId>
          <version>${project.version}</version>
        </dependency>
      </dependencies>]]></pre>

        <p>
          Im zweiten Schritt muss die <code>mycore.properties.private</code> dahin
          gehend erweitert werden, dass das maven-Modul verwendet und die (veraltete)
          iview-Komponente ausgeschlossen wird.
        </p>
          <pre class="brush: xml;gutter: false;">
 MCR.Modules.Application=common,docportal,sampleusers,maven

#exclude these mycore components
 MCR.Components.Exclude=migration20-21,iview</pre>

         <note label="Hinweis">Bei der Angabe der Module ist die Reihenfolge relevant, da Inhalte
         bewusst überschrieben werden! Das Maven-Modul muss daher nach dem common-
         und docportal-Modul (bzw. dem eigenen Anwendungs-Modul) stehen.</note>

        <p>
          Dadurch wird sichergestellt, dass die entsprechenden Bibliotheken geladen werden
           und der Anwendung bei Betrieb zur Verfügung stehen. Der Aufruf <code>ant resolve</code>
           zeigt nun, dass IView2 als "application module" geladen wurde. Weiterhin sollte am
           Ende des Aufrufes ein <code>BUILD SUCCESSFUL</code> das erfolgreiche Laden aller
           benötigten Bibliotheken bestätigen. Ist dem nicht so, prüfen Sie, ob ein Zugang zum
           Internet vorhanden ist, da die Anwendung die nötigen Quellen von verschiedenen
           Servern bezieht. Falls kein Zugang zum Netz möglich ist, muss das .m2-Verzeichnis
           von einem anderen Rechner mit Netzzugang, auf dem die gleiche Anwendung bzw. ein
           DocPortal läuft, kopiert werden. Hier hilft auch gerne die Community weiter!
        </p>
      </section>
      <section>
        <title>Kacheln der Bilder</title>
        <p>
          Nach erfolgreicher Konfiguration müssen nun Skripte und Webanwendung neu erstellt
          werden:
        </p>
          <pre class="brush: xml;gutter: false;">ant create.jar create.scripts create.webapp</pre>

          <p>
          Daraufhin kann die MyCoRe-Kommandozeile gestartet werden, um die in MyCoRe abgelegten
          Bilder für den neuen Bildbetrachter aufzubereiten. Konkret bedeutet dies, dass Kacheln
          für die verschiedenen Auflösungen erstellt werden:
        </p>
          <pre class="brush: xml;gutter: false;">
build/bin/mycore.sh bzw. build/bin/mycore.bat

help tile</pre>

            <p>
          Der Tile-Befehl erstellt die Kacheln. Für alle Derivate lautet der Aufruf dann entsprechend
        </p>
          <pre class="brush: xml;gutter: false;">tile images of all derivates</pre>
          <p>
          Pro Bild benötigt dieser Vorgang ca. 2-3 Sekunden. Da das Kacheln asynchron abläuft, kann
          die Kommandozeile jederzeit mit <code>exit</code> verlassen werden. In diesem Fall wird der
          Vorgang unterbrochen und arbeitet im Hintergrund weiter, sobald zum Beispiel die
          Webanwendung (neu) gestartet wird. Wird ein Bild aufgerufen, für das noch keine Kacheln
          erstellt wurden, wird der IView2 nicht dargestellt. Die Anwendung kann aber trotzdem ganz
          normal genutzt werden.
        </p>
        <p>
          Um den alten Imagecache zu löschen muss in der MyCoRe-Kommandozeile der Befehl
          <code>delete image cache for all derivates</code> aufgerufen werden. Danach kann in den
          <code>mycore.properties.private</code> die imaging-Komponente ausgeschlossen werden.
        </p>
          <pre class="brush: xml;gutter: false;">
#exclude these mycore components
 MCR.Components.Exclude=migration20-21,<strong>imaging</strong>,iview</pre>

      </section>
      <section>
        <title>Webanwendung</title>
        <p>
          Gegebenenfalls müssen noch Stylesheets (XSL) angepasst werden. Einige Templates
          wurden übernommen, z.B. <code>derivateView</code>, andere werden nicht mehr
          unterstützt (alt iview.getSupport, neu iview2.getSupport). Die Einbindung kann
          z.B. wie folgt aussehen:
        </p>
          <pre class="brush: xml;gutter: false;"><![CDATA[
<xsl:call-template name="derivateView">
  <xsl:with-param name="derivateID" select="$deriv" />
</xsl:call-template>]]></pre>
            <p>
          Weitere Informationen dazu entnehmen Sie bitte der <a href="site:iview_pg21"
          >Dokumentation zum Bildbetrachter</a>.
        </p>
      </section>
    </section>
  </body>
</document>
