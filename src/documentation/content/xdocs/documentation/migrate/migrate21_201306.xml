<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">

<document>
  <header>
    <title>Migrationsanleitung von 2.1 auf 2013.06</title>
    <abstract>
      Trotz der vielen Neuerungen ist die Migration von der Version 2.1 auf die Version 2013.06 deutlich
      überschaubarer und leichter zu realisieren als frühere Migrationen. Die in Version 2.1 hinzugekommene
      Verwendung von Maven macht dies unter anderem möglich!
    </abstract>
  </header>
  <body>
    <!-- Include required JS files -->
   <script type="text/javascript" src="/documentation/skin/shCore.js"></script>
   <!--
    At least one brush, eg. XML. You need to include a brush for every
    language you want to highlight
    -->
   <script type="text/javascript" src="/documentation/skin/shBrushXml.js"></script>
   <script type="text/javascript" src="/documentation/skin/shBrushBash.js"></script>
   <script type="text/javascript" src="/documentation/skin/shBrushJava.js"></script>

      <note label="Hinweis">Die Migrationsanleitung geht von MyCoRe 2.1 oder
      höher als Ausgangsbasis aus.</note>


    <section id="start">
      <title>Allgemeine Schritte zur Anwendungsmigration</title>
      <p>
        Der wichtigste Schritt um das neue Release in der eigenen Anwendung zu nutzen, ist die Anpassung der
        Konfigurationsdateien: pom.xml und mycore.properties.private. Daneben sind viele kleinere Anpassungen
        notwendig, die im Folgenden beschrieben werden.
      </p>

      <section>
        <title>Umstellung auf das neue Nutzersystem</title>
        <p>
          Die Migrations-Komponente darf dafür nicht ausgenommen werden! Zur Umstellung muss
          diese Komponente in den mycore.properties.private aus dem Exclude herausgenommen werden.
<pre>
#exclude these mycore components
#MCR.Components.Exclude=migration21-22
</pre>
          Danach steht ein entsprechendes Migrationskommando in der MyCoRe-Kommandozeile (CLI)
          zur Verfügung. Mehr erfahren Sie mit Hilfe des Aufrufs:
          <pre>help migrate</pre>
        </p>
      </section>

      <section>
        <title>Anpassung der Suchmasken</title>
        <p>
          MCRSearchServlet?mode=load ist ein interner HTTP Request, d.h. hier
          ruft sich die Webanwendung aus Java-Code heraus selbst via HTTP auf.
          Das ist an sich noch nie eine gute Idee gewesen.
        </p>
        <p>
          Ursprünglich wurde die MCRSession geschlossen und der Benutzer war
          abgemeldet, d.h. ein Benutzer der "Suche verfeinern" anklickt,
          verliert seine Daten. Die Verwendung eines URIResolvers behebt dieses
          unerwünschte Verhalten.
        </p>
        <p>
          Migration: z. B. via sed per Skript alle Vorkommen von
          <pre>request:servlets/MCRSearchServlet?mode=load&amp;id=</pre>
          durch
          <pre>searchInput:</pre>
          in *.xml ersetzen
        </p>
      </section>

      <section>
        <title>Klassifikationen reparieren</title>
        <p>
          Kategorie-IDs (categID) mit ":" sind nicht mehr erlaubt, da der
          Doppelpunkt als Trenner zwischen classID und categID verwendet wird. Alle
          Doppelpunkte müssen daher ersetzt werden. Das CLI-Kommando
          <pre>fix colone in categID</pre>
          ersetzt den ":" entsprechend durch ein "-".
        </p>
      </section>

      <section>
        <title>Klassifikationsbrowser</title>
        <p>
          Dem Klassifikationsbrowser muss für das Layout der Name des verwendeten
          Templates als Parameter mitgegeben werden. In den entsprechenden
          content-Dateien, in denen das &lt;classificationbrowser />-Tag genutzt wird,
          ist dies entsprechend zu ergänzen:
          <pre>&lt;classificationbrowser ... addParameter="XSL.template=template_clausthal" /></pre>
          Welche Parameter der Klassifikationsbrowser noch bietet, können Sie in der
          <a href="site:section14">Dokumentation</a> nachlesen.
        </p>
      </section>

      <section>
        <title>Klassifikationseditor</title>
        <p>
          Es steht ein neuer Klassifikationseditor zur Verfügung. In der eigenen Anwendung
          muss der Link zum Klassifikationseditor dafür angepasst werden (meist in der navigation.xml):
          <pre>/modules/classeditor/classificationEditor.xml</pre>
          Details zum neuen Editor finden Sie in der <a href="site:section14">Dokumentation</a>.
        </p>
      </section>

      <section>
        <title>Verwendung von objectTypes.xsl</title>
        <p>
          Die Stylesheets für die Darstellung der MyCoRe-Objekttypen werden nicht mehr über
          objectTypes.xsl eingebunden. Statt dessen wird der xslInclude-URIResolver benutzt.
          Falls Sie in Ihrer Anwendung mycoreobject.xsl und results.xsl oder andere Dateien
          überschreiben, müssen Sie dort das xsl:include ändern (siehe auch <a href=
          "http://www.mycore.de/viewvc/viewvc.cgi?view=revision&amp;revision=24483">SVN</a>).
          Statt <pre>&lt;xsl:include href="objecttypes.xsl" /></pre>
          muss es nun heissen: <pre>&lt;xsl:include href="xslInclude:objectTypes" /></pre>
        </p>
        <p>
          Falls Sie das "addObjectType"-Target von docportal in eigenen build.xml-Dateien verwenden,
          dann müssen Sie dieses jetzt in der config-Phase aufrufen und nicht mehr in der webapp-Phase.
        </p>
      </section>

      <section>
        <title>Layoutanpassungen</title>
        <p>
        </p>
      </section>
    </section>


    <section id="optional">
      <title>Optionale Erweiterungen</title>
      <p>
        Mit dem Release sind auch viele neue Funktionen hinzugekommen. Wie diese in die eigene Anwendung integriert
        werden können soll in diesem Abschnitt kurz erläutert werden. Mehr Details erfahren Sie in der Dokumentation
        oder auf der Mailing-Liste.
      </p>
      <section>
        <title>Warenkorb</title>
        <p>
        siehe <a href="/documentation/components.html#Warenkorb">Dokumentation</a>
        </p>
      </section>
      <section>
        <title>Druckfunktion im Bildbetrachter aktivieren</title>
        <p>
        </p>
      </section>
      <section>
        <title>Editor-Validierung</title>
        <p>
        </p>
      </section>
      <section>
        <title>Info-Stylesheet</title>
        <p>
        siehe <a href="/documentation/principles/11_frontend.html#XSL-Info-Servlet">Dokumentation</a>
        </p>
      </section>
      <section>
        <title>Umstellung auf SOLR</title>
        <p>
          Um statt Lucene die neue SOLR-Implementierung für die Suche zu verwenden, muss die eigene Anwendung
          entsprechend konfiguriert werden. Die Anzeige der Klassifikationen und die Trefferliste basieren
          auf der jeweiligen Rückgabe aus dem Index, weswegen hierfür neue Stylesheets erstellt bzw. bestehende
          angepasst werden müssen.
        </p>
        <p>
          Bevor auf SOLR umgestiegen werden soll, ist es ratsam die entsprechende
          <a href="http://cmswiki.rrz.uni-hamburg.de/hummel/MyCoRe/Dokumentation/SOLR">Dokumentation im Wiki</a>
          zu lesen. Für die eigene Anwendung ‚myapp‘ (bzw. das eigene Anwendungsmodul) sind die folgenden Dateien anzupassen
          bzw. neu zu erstellen:
        </p>
        <ul>
          <li>build.xml -> config angepasst</li>
          <li>config/mycore.properties</li>
          <li>config/solr-home</li>
          <li>xsl/classificationBrowserData-myapp.xsl</li>
          <li>xsl/myapp-solr.xsl</li>
          <li>xsl/response-myapp.xsl</li>
          <li>xsl/solr-response.xsl</li>
          <li>content/classification.xsl</li>
        </ul>
      </section>
    </section>


    <section id="new">
      <title>Weitere Neuerungen</title>
      <p>
        Abschliessend folgt ein Überblick über Neuerungen, die ohne weitere Anpassungen genutzt werden können.
      </p>
      <section>
        <title>Neue CLI-Befehle</title>
        <p>
          Es gibt einen neuen CLI-Befehl
          <pre>"generate md5sum files indirectory {0}"</pre>
        </p>
        <p>
          Mit diesem Befehl kann man Dateien erzeugen, die zu dem "md5sum"-Programm kompatibel sind.
          Pro Content-Store-ID, wird eine Datei in dem Verzeichnis angelegt in dem alle Dateien des
          Content-Stores alphabetisch sortiert mit MD5 Summer hinterlegt sind.
        </p>
        <p>
          Diese MD5-Datei kann man mit <pre>"md5sum -c &lt;Datei.md5>"</pre> zum Überprüfen aller
          Dateien benutzen, um so Änderungen oder fehlende Dateien feststellen zu können.
        </p>
        <p>
          Mit einer sortierten Liste (z.B. per find) der Dateien im Content-Store, kann man mit
          einem Script zusätzlich noch leicht herausfinden, welche Dateien in der Datenbank nicht
          vermerkt sind, aber noch Platz wegnehmen.
        </p>
      </section>
      <section>
        <title>Weitere Workflowkomponente</title>
        <p>
          Es steht nun neben dem SimpleWorkflow eine weitere Workflowkomponente zur Verfügung ...
        </p>
      </section>
    </section>
 <!-- Finally, to actually run the highlighter, you need to include this JS on your page -->
 <script type="text/javascript">
     SyntaxHighlighter.all()
 </script>

  </body>
</document>
