<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">

<document>

  <header>
    <title>SOLR und MyCoRe</title>
    <release>2018.06</release>
    <version>2018-06-22</version>
    <authors>
      <person email="[EMAIL PROTECTED]" name="Jens Kupferschmidt" />
      <person email="[EMAIL PROTECTED]" name="Kathleen Neumann" />
      <person email="[EMAIL PROTECTED]" name="Robert Stephan" />
    </authors>
    <abstract>
      Dieses Kapitel beschäftigt sich mit der Einbindung der SOLR7-Suchmaschine in MyCoRe. Im MyCoRe Release 2018.06 LTS wird Solr 
      7.0.1 verwendet.
    </abstract>
  </header>

  <body>

    <section>
      <title>SOLR Konfiguration für MyCoRe</title>
      <p>
        Falls noch kein Solr7 Server zur Verfügung steht, kann er gemäß der Anleitung im Abschnitt <a href="site:solr7">Einrichtung eines Solr 7.0.1 Servers</a> installiert werden.
      </p>
      <p>
        Nun müssen für jede MyCoRe-Anwendung ein oder mehrere Solr-Cores angelegt werden.
        Da sich noch nicht alle Konfigurationsdateien für einen Core über die die Solr-API erstellen lassen,
        werden Templates (configuration sets) für die Basiskonfiguration durch MyCoRe über GitHub bereitgestellt.
      </p>
      <p>
        Da verschiedene MyCoRe Komponenten und Module individuelle Suchfelder und Datentypen benötigen, können diese direkt
        in den Modulen definiert werden. Mittels eines MyCoRe-Kommandos werden diese Definitonsdateien ausgelesen und über die 
        <a href="https://lucene.apache.org/solr/guide/7_0/schema-api.html">Solr Schema API</a>
        in den Core geschrieben.
      </p>

      <section>
        <title>Configuration Sets laden</title>
        <p>
          Die Basis-Konfiguration eines Solr Cores erfolgt über <strong>Configuration Sets</strong>. Für den MyCoRe <strong>main</strong> Core
          befindet sich ein solches Set im <a href="https://github.com/MyCoRe-Org/mycore_solr_configset_main">GitHub</a>.
        </p>
        <p>
          Um das Configuration Set in den Solr-Server zu integrieren kann folgende Kommandos ausgeführt werden:
        </p>
        <pre class="brush: shell;gutter: false;">
cd .../solr-7.0.1/server/solr/configsets
git clone https://github.com/MyCoRe-Org/mycore_solr_configset_main.git</pre>
        <p>
          Alternativ kann das Verzeichnis auch manuell heruntergeladen und an in diesen Ordner kopiert werden.
        </p>
      </section>

      <section>
        <title>Standard Solr Core (main) erzeugen</title>
        <p>
          Falls noch nicht geschehen, sollte jetzt die Solr-Server-URL der MyCoRe-Anwendung über ein Property bekannt gemacht werden:
        </p>
        <pre class="brush: shell;gutter: false;">MCR.Solr.ServerURL=http://localhost:8983/</pre>
  
        <p>
          Anschließend kann der <strong>main</strong> Core über die MyCoRe-CLI erstellt und registriert werden:
        </p>
        <pre class="brush: shell;gutter: false;">
          mycore.sh create solr core with name {name} using configset mycore_solr_configset_main
          mycore.sh register solr core with name {0} as core main
        </pre>
  
        <p>
          Als Name des Cores (<code>{name}</code>) kann der Name der MyCoRe-Anwendung gewählt werden.
          Anschließend kann über die Web-Oberfläche geprüft werden, ob der Core richtig angelegt wurde 
          (<a href="http://localhost:8983/solr/#/~cores">http://localhost:8983/solr/#/~cores</a>).
        </p>
  
  
        <p>
          Damit der Core beim Neustart der MyCoRe-Anwendung automatisch geladen wird das Property
          <code>MCR.Solr.Core.{coreID}.Name</code> gesetzt werden, z.B.:
        </p>
        <pre class="brush: shell;gutter: false;">MCR.Solr.Core.main.Name=mir</pre>
        <p>
          Es ist auch möglich, den Core auf einem anderen Solr Server zu erstellen. In diesem Fall muss zusätzlich das Property
          <code>MCR.Solr.Core.{coreID}.ServerURL</code> gesetzt werden, z.B.:
        </p>
        <pre class="brush: shell;gutter: false;">MCR.Solr.Core.main.ServerURL=http://solr.mycore.de:9010/</pre>
  
        <p>
          Über das Kommando <code>show solr configuration</code> kann eine Liste der zu setzenden Properties erzeugt werden.
        </p>
  
      </section>  
  
      <section>
        <title>Solr Konfiguration und Schema erstellen</title>
  
        <p>
          Die Konfiguration der Solr-Suchfelder, Request-Handler, ... wurden seit MyCoRe 2018.06 LTS 
          auf die Module und Komponenten aufgeteilt, in denen sie verwendet werden. Die Basisfelder / -Konfiguration für alle MyCoRe-Anwendungen
          befindet sich im Modul <code>mycore-solr</code>.
        </p>
        <p> 
          In Einzelfällen kann es erforderlich sein, dass neben dem Solr Corevom Typ <code>main</code>
          weitere Definitionen für andere Core Typen (z. B. <code>classification</code>) definiert sind. 
        </p>
        <pre class="brush: shell;gutter: false;">
          {mycore-module}/src/main/resources/components/{module_name}/config/solr 
            or
          {application-module}/src/main/resources/config/{application-module}/solr
  
           .../main - the core that use each MyCoRe application
               .../solr-schema.json - filled if the module use SOLR schema definitions
               .../solr-config.json - filled if the module use SOLR configurations
               
           .../{other_type} - other core definitions
               .../solr-schema.json - filled if the module use SOLR schema definitions
               .../solr-config.json - filled if the module use SOLR configurations
        </pre>
         
        <p>
          Die JSON-Dateien bestehen aus Json-Arrays, die Kommandos der Solr-Schema bzw. Solr-Configuration API enthalten. 
          Sollen bereits bestehende / in MyCoRe vorhandene Felder oder ihre Definition geändert werden, kann
          dies über <code>replace</code>-Anweisungen in den JSON-Konfigurationsdateien erfolgen.
        </p>
        <p>
          Über das MyCoRe-CLI Kommando: <br />
          <code>mycore.sh reload solr configuration {configurationType} in core {coreID}</code> <br />
          wird die Konfiguration geladen. Für den Normalfall lautet das Kommando:
        </p>
        <pre class="brush: shell;gutter: false;">mycore.sh reload solr configuration main in core main</pre>
        
        <p>
          Anschließend sollte noch einmal über die Solr-Web-Oberfläche geprüft werden, ob der Core vollständig konfiguriert wurde.
          Auch sollte im MyCoRe-Log / in der Kommandozeile geprüft werden, ob SOLR sämtliche Konfigurationskommandos ausgeführt hat
          Ist alles okay, so ist der Core betriebsbereit.
        </p>
        <p>
          siehe <a href="https://lucene.apache.org/solr/guide/7_0/solr-control-script-reference.html">Solr Control Script Reference</a>, 
          <a href="https://lucene.apache.org/solr/guide/7_0/schema-api.html">Schema API</a> und 
          <a href="https://lucene.apache.org/solr/guide/7_0/config-api.html">Config API</a>
        </p>
      </section>
    </section>
  
    <section>
      <title>Das Solr-Document</title>
      <p>
        Die in SOLR zu speichernden Daten werden als Solr-Document über eine Kette von XSLT-Transformern generiert. Hierfür ist das 
        Property <code>MCR.URIResolver.xslImports.solr-document</code> zuständig. Grundsätzlich in der Kette enthalten sind
        die Stylesheets <code>solr-basetemplate.xsl</code> und <code>mycoreobject-dynamicfields.xsl</code>. Weitere Transformer
        können dieser Kette angefügt werden (siehe Beispielcode). Der an SOLR ausgehende Datenstrom läßt sich im Web-Browser
        mit der URL <code>http://{myapp}/receive/{mycore_id}?XSL.Style=solr-document</code> überprüfen.
      </p>
      <pre class="brush: xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:mcrxsl="xalan://org.mycore.common.xml.MCRXMLFunctions"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xalan="http://xml.apache.org/xalan"
  exclude-result-prefixes="xalan xlink mcrxsl">
   
  <xsl:import href="xslImport:solr-document:viaf2solr.xsl" />
  
  <xsl:template match="mycoreobject[contains(@ID,'_{my_datamodel}_')]">
    <xsl:apply-imports />
    <!-- field name="viaf_name_all" type="text_general" multiValued="true" stored="true" -->
    <xsl:for-each select="./metadata/def.preferredName/preferredName">
      <field name="viaf_name_all">
        <xsl:value-of select="fullname/text()" />
      </field>
    </xsl:for-each>
    ...
  </template>
</stylesheet>]]></pre>

      <p>
        Über verschiedene <code>rebuild</code> Kommandos (siehe <a href="site:search/using_solr__solr_commands">Kommandos zur Arbeit mit Solr</a>) können
        die Daten in den Solr Core eingespielt werden. Um alle Daten zu indexieren, kann folgendes Kommando verwendet werden:
      </p>
      <pre class="brush: shell;gutter: false;">rebuild solr metadata and content index in core main</pre>
  
  
    </section>
  
    <section>
      <title>Properties für die SOLR-Komponente</title>
      <p>
        <span class="label label-warning">Achtung:</span> In LTS 2017.06 sind die Properties noch mit <code>MCR.Module-solr</code>
        statt mit <code>MCR.Solr</code> bezeichnet. Mit dem LTS 2018.06 sind diese deprecated!
      </p>
      <table class="table table-condensed solr-properties-table">
        <tr>
          <th>Property in 2018</th>
          <th>Bedeutung</th>
          <th>in App.-Config</th>
        </tr>
        <tr>
          <td><code>MCR.Solr.ServerURL</code></td>
          <td>default URL to SOLR server like http://mysolr.de:8983/ without <strong>solr</strong>, use only URL!</td>
          <td><strong>required</strong></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.Core.{coreID}.Name</code></td>
          <td>core name for the core type that will be used for this MyCoRe application</td>
          <td><strong>required</strong></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.Core.{coreID}.ServerURL</code></td>
          <td>if core runs on another server than configured as default, you can specify this URL here</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.Indexer.File.AccumulatorList</code></td>
          <td>???</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.Indexer.BulkSize</code></td>
          <td>default=100 ; Die Anzahl der Objekte, die mit einem mal an SOLR geschickt werden.</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.Indexer.ThreadCount</code></td>
          <td>default=4 ; Anzahl der benutzten Threads</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.XMLProtocolVersion</code></td>
          <td>current=4.5</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.SelectProxy.MaxConnections</code></td>
          <td>default=20 ; max. Anzahl der Verbindungen zum SOLR-Server für select</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.SelectPath</code></td>
          <td>default=/select</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.UpdatePath</code></td>
          <td>default=/update</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.ExtractPath</code></td>
          <td>default=/update/extract</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.Proxy.WhiteList</code></td>
          <td>default=/select ; der Proxy akzeptiert nur die Liste davon</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.SolrClient.ConnectionTimeout</code></td>
          <td>default=0</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.SolrClient.SocketTimeout</code></td>
          <td>default=50000</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.ConcurrentSolrUpdateClient.Enabled</code></td>
          <td>default=true ; soll das Update parallel erfolgen?</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.ConcurrentSolrUpdateClient.QueueSize</code></td>
          <td>default=100</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.ConcurrentSolrUpdateClient.ThreadCount</code></td>
          <td>
            Wert entspricht dem Property
            <code>MCR.Solr.Indexer.ThreadCount</code>
          </td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.SolrInputDocument.Factory</code></td>
          <td>default=org.mycore.solr.index.document.MCRSolrTransformerInputDocumentFactory</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.SolrInputDocument.Transformer</code></td>
          <td>default=mycoreobject-solrdocument</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.SolrInputDocument.Path.Factory</code></td>
          <td>default=org.mycore.solr.index.file.MCRSolrPathDocumentFactory</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.IndexHandler.Factory</code></td>
          <td>default=org.mycore.solr.index.handlers.MCRSolrLazyInputDocumentHandlerFactory</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.FileIndexStrategy</code></td>
          <td>default=org.mycore.solr.index.strategy.MCRSolrMimeTypeStrategie</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.MimeTypeStrategy.Pattern</code></td>
          <td>default=image/.*</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.DynamicFields</code></td>
          <td>default=true ; erzeugt auch dynamische Felder für SOLR <br/>
          Es sollte geprüft werden, ob die Übertragung  dynamischer Felder in der speziellen Anwendung
          erforderlich ist. Andernfalls sollte der Wert auf <code>false</code> gestellt werden.</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.ContentBaseFields</code></td>
          <td>eine Liste von Feldnamen für allgemeine Derivate-Metadaten</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.AVExtenderFields</code></td>
          <td>eine Liste von Feldnamen für Video-Derivate-Metadaten</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.TikaFileds</code></td>
          <td>eine Liste von Feldnamen für Tika-Metadaten</td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.JoinQueryFileds</code></td>
          <td>
            enthält die Liste der Properties
            <code>MCR.Solr.ContentBaseFields</code>
            ,
            <code>MCR.Solr.AVExtenderFields</code>
            ,
            <code>MCR.Solr.TikaFileds</code>
          </td>
          <td></td>
        </tr>
        <tr>
          <td><code>MCR.Solr.netsedDocuments</code></td>
          <td>default=true ; ???</td>
          <td></td>
        </tr>
      </table>
    </section>
  
    <section id="solr_commands">
      <title>SOLR Kommandos für die MyCoRe CLI</title>
      <p>
        Folgende Kommandos stehen für die Arbeit mit SOLR an der Kommandozeile zur Verfügung.<br />
        Die Core ID für den Standard Solr Core in MyCoRe ist <code>main</code>.
      </p>
       <dl>
        <dt>
          <code>show solr configuration</code>
        </dt>
        <dd>
          listet die aktuell konfigurierten Solr Cores auf.
        </dd>
        
        <dt>
          <code>create solr core with name {0} on server {1} using configset {2}</code>
        </dt>
        <dd>
          legt einen neuen Core mit dem Namen <code>{0}</code> (entspricht URL-Pfad des Cores auf dem Solr Server), auf dem Solr Server
          mit der Basis-URL <code>{1}</code> und dem Solr ConfigSet <code>{2}</code> (BasisKonfiguration als Template auf dem Solr Server) an.
        </dd>
        
        <dt>
          <code>create solr core with name {0} using configset {1}</code>
        </dt>
        <dd>
          legt einen neuen Core mit dem Namen <code>{0}</code> (entspricht URL-Pfad des Cores auf dem Solr Server), auf dem Default Solr Server
          (siehe Property: <code>MCR.Solr.ServerURL</code>) und dem Solr ConfigSet <code>{1}</code> (BasisKonfiguration als Template auf dem Solr Server) an.
        </dd>
        
        <dt>
          <code>register solr core with name {0} on server {1} as core {2}</code>
        </dt>
        <dd>
          registriert einen Solr Core mit dem Namen <code>{0}</code> (entspricht URL-Pfad des Cores auf dem Solr Server) auf dem Solr Server
          mit der Basis-URL <code>{1}</code> unter der ID <code>{2}</code> in der MyCoRe-Anwendung. <br />
        </dd>
        
        <dt>
          <code>register solr core with name {0} as core {1}</code>
        </dt>
        <dd>
          registriert einen Solr Core mit dem Namen <code>{0}</code> (entspricht URL-Pfad des Cores auf dem Solr Server), auf dem Default Solr Server
          (siehe Property: <code>MCR.Solr.ServerURL</code>) unter der ID <code>{1}</code> in der MyCoRe-Anwendung.
        </dd>
        
        <dt>
          <code>switch solr core {0} with core {1}</code>
        </dt>
        <dd>
          tauscht zwei bestehende Solr Cores in der Anwendung aus.<br />
          Dadurch wird es möglich, im laufenden Betrieb einen neuen Core zu konfigurieren und zu befüllen, 
          um ihn anschließend gegen einen bestehenden Core auszutauschen.
        </dd>
        
        <dt>
          <code>reload solr configuration {0} in core {1}</code>
        </dt>
        <dd>
          lädt die Solr Konfiguration (und Schema) mit der ID <code>{0}</code> (aus allen verfügbaren MyCoRe Modulen und Komponenten) 
          in den Solr Core mit der ID <code>{1}</code>.
        </dd>
      </dl>
  
       <dl>
        <dt>
          <code>rebuild solr metadata and content index in core {0}</code>
        </dt>
        <dd>
          lädt / aktualisiert die indexierten Metadaten und Inhalte aller MyCoRe-Objekte und Derivate im Solr Core mit der ID <code>{0}</code>.
        </dd>
        
        <dt>
          <code>rebuild solr metadata index for object {0} in core {1}</code>
        </dt>
        <dd>
          lädt / aktualisiert die indexierten Metadaten des MyCoRe-Objektes mit der ID <code>{0}</code> im Solr Core mit der ID <code>{1}</code>.
        </dd>
        
        <dt>
          <code>rebuild solr metadata index for all objects of type {0} in core {1}</code>
        </dt>
        <dd>
          lädt / aktualisiert die indexierten Metadaten aller MyCoRe-Objekte vom Typ <code>{0}</code> im Solr Core mit der ID <code>{1}</code>.
        </dd>
        
        <dt>
          <code>rebuild solr metadata index for selected in core {0}</code>
        </dt>
        <dd>
          lädt / aktualisiert die indexierten Metadaten für zuvor ausgewählten MyCoRe Objekte  im Solr Core mit der ID <code>{1}</code> <br />
          (siehe Kommando <code>select objects with solr query {0} in core {1}</code>). 
        </dd>
        
        <dt>
          <code>rebuild solr metadata index in core {0}</code>
        </dt>
        <dd>
          lädt / aktualisiert die indexierten Metadaten für alle MyCoRe Objekte im Solr Core mit der ID <code>{0}</code>.
        </dd>
  
        <dt>
          <code>rebuild solr content index for object {0} in core {1}</code>
        </dt>
        <dd>
          lädt / aktualisiert die indexierten Inhalte  aller Derivate des Objektes (oder des Derivates)  
          <code>{0}</code> im Solr Core mit der ID <code>{1}</code>.
        </dd>
        
        <dt>
          <code>rebuild solr content index for selected in core {0}</code>
        </dt>
        <dd>
          lädt / aktualisiert die indexierten Inhalte der Derivate der ausgewählten Objekte (oder der ausgewählten Derivate)  
          im Solr Core mit der ID <code>{0}</code>.
        </dd>
  
        <dt>
          <code>rebuild solr content index in core {0}</code>
        </dt>
        <dd>
          lädt / aktualisiert die indexierten Inhalte aller Derivate im Solr Core mit der ID <code>{0}</code>.
        </dd>
  
        <dt>
          <code>rebuild solr classification index in core {0}</code>
        </dt>
        <dd>
          lädt / aktualisiert die Klassifikations-Objekte im Solr Core mit der ID <code>{0}</code>.
        </dd>
      </dl>
  
      <dl>
        <dt>
          <code>clear solr index in core {0}</code>
        </dt>
        <dd>
          löscht alle Einträge aus dem Solr Core mit der ID <code>{0}</code>.
        </dd>
        
        <dt>
          <code>delete from solr index all objects of type {0} in core {1}</code>
        </dt>
        <dd>
          löscht alle Einträge für MyCoRe Objekte des Types <code>{0}</code> aus dem Solr Core mit der ID <code>{1}</code>.
        </dd>
        
        <dt>
          <code>delete from solr index object {0} in core {1}</code>
        </dt>
        <dd>
          löscht das MyCoRe Objekt mit der ID <code>{0}</code> aus dem Solr Core mit der ID <code>{1}</code>.
        </dd>
  
        <dt>
          <code>select objects with solr query {0} in core {1}</code>
        </dt>
        <dd>
          erzeugt eine Liste von MyCoRe-Objekten für die Solr Anfrage <code>{0}</code> im Solr Core mit der ID <code>{1}</code>.<br />
          Diese Liste kann anschließend mit weiteren Kommandos verarbeitet werden.
        </dd>
      </dl>
      <dl>
        <dt>
          <code>optimize solr index in core {0}</code>
        </dt>
        <dd>
          optimiert den Solr Core mit der ID <code>{0}</code>.<br />
          Mit dieser Operation werden Solr-intern stark fragmentierte Index-Segmente zusammengefasst.
        </dd>
        <dt>
          <code>synchronize solr metadata index for all objects of type {0} in core {1}</code>
        </dt>
        <dd>
          prüft, ob die Metadaten aller MyCoRe-Objekte des Types <code>{0}</code> im Solr Core mit der ID <code>{1}</code>
          indexiert worden sind und führt für fehlende Objekte eine Neuindexierung aus.<br />
        </dd>
        <dt>
          <code>synchronize solr metadata index in core {0}</code>
        </dt>
        <dd>
          prüft, ob die Metadaten aller MyCoRe-Objekte im Solr Core mit der ID <code>{0}</code>
          indexiert worden sind und führt für fehlende Objekte eine Neuindexierung aus.<br />
        </dd>
  
  
      </dl>
    </section>
  
    <section>
      <title>SOLR-Abfragen über die MyCoRe-Java-API</title>
      <p>
        Mit diesem Code-Schnipsel soll demonstriert werden, wie ein Zugriff auf die SOLR-Daten mittels MyCoRe-API
        erfolgen kann.
      </p>
      <pre class="brush: java">
import org.apache.solr.client.solrj.SolrClient;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.common.SolrDocumentList;

import org.mycore.solr.MCRSolrClientFactory;
import org.mycore.solr.MCRSolrUtils;

...
        SolrClient solrClient = MCRSolrClientFactory.getMainSolrClient();
  
        oder
  
        SolrClient solrClient = MCRSolrClientFactory.get("{coreID}").getClient();
  
        SolrQuery query = new SolrQuery();
        query.setQuery("title:foo");
        query.setRows(10);
        SolrDocumentList results = solrClient.query(query).getResults();
  
  ...
      </pre>
    </section>

  </body>
</document>
