<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">

<document>
  <header>
    <title>Pluginbasierte Entwicklung auf Basis einer eigenen JAR Datei</title>
    <version>2017-03-07</version>
    <release>2016.12</release>
    <authors>
      <person name="Paul Rochowski" email="[EMAIL PROTECTED]"/>
    </authors>
    <abstract>
      MyCore bietet die Möglichkeit innerhalb des Konfigurationsverzeichnisses in dem Ordner lib eigene
      Anwendungserweiterungen (Komponenten) zu hinterlegen. Der folgende Abschnitt beschreibt die Möglichkeiten
      die ein solches Paket durch seine grundlegende Struktur bietet, stellt ein einfaches Beispiel
      dar um eine Hello-World Servletkomponente innerhalb von Eclipse zu entwickeln und zeigt wie diese mit dem
      MyCoRe-Framework verknüpft wird.
    </abstract>
  </header>
  
  <body>
    
    <section>
      <title>Warum pluginbasiert entwickeln?</title>
      <p>
        Ein stetig wachsender MyCoRe Kern bietet ein solides Framework für die Verwaltung und Präsentation
        digitaler Inhalte an. Es ist jedoch zu beachten, dass jede MyCoRe Anwendung nun mal für sich
        eigenständig ist. Zwar bietet die Community mit Skeleton und MIR bereits fertige Anwendungen die schnell
        an die eigenen Bedürfnisse angepasst werden können, die Frage nach einem eigenen Plugin ist allerdings
        berechtigt, wenn MIR bzw. Skeleton mit den vorgegebenen Werkzeugen nun mal nicht ausreichen. Es gibt
        teils Anforderungen an eine MyCoRe Anwendung die ggf. einmalig sind. Hier macht es keinen Sinn diese in
        den Kern einfließen zu lassen, da dieses Vorgehen nur eine Vergrößerung des Kerns ohne Mehrwert für die
        Community und eine Verkomplizierung der eigentlichen MyCoRe Entwicklung zur Folge hätte.
      </p>
      <p>
        Ebenfalls gibt es Features die zwar einen Mehrwert für die Community darstellen, allerdings über die
        Zeit so mächtig geworden sind, dass die Überlegung nahe steht diese in losgelöste Komponenten
        auszulagern um den Kern auf seine Hauptelemente zu beschränken und die Entwicklung damit zu
        vereinfachen. Als letzter Punkt ist hier hervorzuheben, dass eine pluginbasierte Entwicklung dem
        Entwickler immer eine geschützte Sandbox Umgebung zur Verfügung stellt, in welcher er neues ausprobieren
        und der Community auf diese Weise vorstellen kann.
      </p>
    </section>
    <section>
      <title>Make JAR not WAR!</title>
      <p>
        Mit der 2011 vorgestellten JSR 315: JavaTM Servlet 3.0 Spezifikation erhielten
        Modularisierungsmöglichkeiten Einzug in Web Anwendungen auf Servlet Basis. Statt wie zuvor über den
        zentralen Deployment Descriptor(web.xml) die Konfiguration vorzunehmen, wie der Webserver Anfragen
        annehmen und bedienen soll, geben wir Komponenten innerhalb einer JAR Datei die Eigenverantwortung.
        Diese Eigenverantwortung bietet für die eigene Anwendung auf MyCoRe Basis weitreichende Möglichkeiten.
        Innerhalb der  <a href="https://github.com/rochpaul/mycore-custom-module">MyCoRe GitHub Seite</a> (to do:
        Beispielprojekt auf MyCoRe Github
        Seite laden) steht ein minimales Maven Projekt bereit, welches die Referenzarchitektur für eine
        eigene pluginbasierte Anwendung darstellt.
      </p>
    </section>
    
    <section>
      <title>Tutorial: HelloWorldServlet in Aktion</title>
      <p>
        Um das hier beschriebene Tutorial nacharbeiten zu können, sollten die folgenden Voraussetzung erfüllt sein:
      </p>
      <ul>
        <li>Generelle MyCoRe Anforderungen (<a href="http://mycore.de/documentation/getting_started/requirements.html">
          siehe Anforderungen</a>)
          mit einer aktuellen MIR Installation (<a href="http://mycore.de/documentation/getting_started/mir.html">
            siehe MIR</a>)
        </li>
        <li>Eclipse Grundinstallation (getestet mit Eclipse Java EE IDE for Web Developers Mars.2 Release 4.5.2)</li>
        <li>Die Eclipse Erweiterungen m2e sowie EGit</li>
      </ul>
      <p>
        Wir erstellen für das custom-module Beispielprojekt zunächst einen neuen Workspace und checken dann von der
        MyCoRe GitHub Seite das Projekt aus. Hierzu öffnen wir in Eclipse die Git Perspective (Window -> Perspective ->
        Open Perspective -> Other...) und klicken auf die Option „Clone Git Repository“. Wir füllen wie in Abbildung 1
        gezeigt die benötigten Eingabefelder aus (Hier reicht es die URL im Browser mit Strg + c zu kopieren und dann
        „Clone Git Repository“ zu öffnen, Eclipse füllt die Eingabefelder dann automatisch aus) und wählen den Master
        aus. Nach Eingabe eines gewünschten Verzeichnispfades erstellen wir mit Finish das lokale custom-module Git
        Repository.
      </p>
      <div style="text-align:center;margin:10px 0;">
        <img src="images/tutorial_plugin_dev/custom_module_checkout.png"
             alt="Checkout des custom_module Beispielprojektes" style="margin:5px;padding:10px;border:1px solid gray;"
             width="850px"/>
        <br/>
        <span class="klein"><strong>Abbildung 1:</strong>Checkout des custom_module Beispielprojektes
        </span>
      </div>
      <p>
        Nachdem wir nun lokal alle benötigten Sourcen ausgecheckt haben sagen wir Eclipse, dass es sich um ein Maven
        Projekt handelt und dieses in unseren Project Explorer importiert werden soll. Hierzu wählen wir unter
        File - Import die Select Option "Existing Maven Projects" aus. Als Root Directory geben wir den Root unseres
        zuvor erstellten lokalen Repositories an. Eclipse erkennt nun wie in Abbildung 2 zu sehen ist anhand der im Root
        liegenden pom.xml, dass es sich
        um ein Maven Projekt handelt.
      </p>
      <div style="text-align:center;margin:10px 0;">
        <img src="images/tutorial_plugin_dev/custom_module_maven.png"
             alt="Import als Maven Projekt" style="margin:5px;padding:10px;border:1px solid gray;"
             width="850px"/>
        <br/>
        <span class="klein"><strong>Abbildung 2:</strong>Import als Maven Projekt
        </span>
      </div>
      <p>
        Das custom-module wurde nun als Maven Projekt importiert und steht ebenso unter git Versionskontrolle.
        Um nun ein eigenes Projekt zu erstellen und das custom-module als Basis zu benutzen eignet sich GitHub als
        öffentliches remote Git Repository. Von dem custom-module Projekt kann innerhalb von GitHub ein Fork erstellt
        und dieser dann wie in Abbildung 3 zusehen ist konfiguriert werden. Für weitere Infos bzgl. Git/GitHub wird an
        dieser Stelle die
        <a href="http://mycore.de/documentation/developer/work_with_git.html">interne Git Dokumentation</a>
        empfohlen.
      </p>
      <div style="text-align:center;margin:10px 0;">
        <img src="images/tutorial_plugin_dev/custom_module_githubremoteurl.png"
             alt="Einstellung des remote Repositories für die eigene Anwendung"
             style="margin:5px;padding:10px;border:1px solid gray;"
             width="850px"/>
        <br/>
        <span class="klein"><strong>Abbildung 3:</strong>Einstellung des remote Repositories für die eigene Anwendung
        </span>
      </div>
    </section>
    
    
    <section>
      <title>Aufbau und Struktur eigener Komponenten</title>
      
      <pre class="brush: xml">
        <![CDATA[
<web-fragment xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xmlns="http://java.sun.com/xml/ns/javaee"
              xmlns:webfragment="http://java.sun.com/xml/ns/javaee/web-fragment_3_0.xsd"
              xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-fragment_3_0.xsd"
              id="WebFragment_ID" version="3.0">
</web-fragment>
]]></pre>
      
      <pre class="brush: shell; gutter: false;">
|
 \ src
   | 
    \ main
      | 
       \ resources (Alle nicht zu übersetzenden Resourcen)
         | 
          \ META-INF (JAR Spezifikation Standard)
            |
	     \web-fragment.xml (Definition von Servlets, Filtern und Listener für JAR Ebene)
	     \resources (Statischer Content mit Zugriff vom web-context root)

       \ java (Java Resourcen)
	 |
	  \ custom/mycore (Package Struktur)
	    |
             \servlets (Ordner für Servlets) 
               |
                \HelloWorldServlet (Hello World Servlet Beispiel)
|
 \ LICENSE.txt (Lizenzinformationen)
 \ pom.xml (Maven Einstellungen bzgl. Abhängigkeiten, Versionierung und Build Prozess)
      </pre>
      
      <pre class="brush: xml">
        <![CDATA[
...
  <display-name>HelloWorldServlet</display-name>
  <name>HelloWorldServlet</name>
  <servlet>
    <servlet-name>HelloWorldServlet</servlet-name>
    <servlet-class>custom.mycore.servlets.HelloWorldServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>HelloWorldServlet</servlet-name>
    <url-pattern>/HelloWorld</url-pattern>
  </servlet-mapping>
...
]]></pre>
    
    </section>
    
    <section>
      <title>MyCore um Hello World Servletkomponente erweitern</title>
    </section>
    
    <section>
      <title>Deployment/Debugging</title>
    </section>
  </body>
</document>