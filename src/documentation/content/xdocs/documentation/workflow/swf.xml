<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">

<document>
  <header>
    <title>Simple Workflow</title>
    <release>2015.05</release>
    <authors>
      <person email="[EMAIL PROTECTED]" name="Jens Kupferschmidt" />
    </authors>
    <abstract>Diese Funktionalitäten sind mit 2016.06 deprecate und werden mit 2017.x entfernt.</abstract>
  </header>
<body>
  <section>
   <title>Die SimpleWorkflow-Komponente (swf)</title>

   <section>
    <title>Allgemeines</title>

    <img src="images/progguide_simpleworkflow_1.png" alt="SimpleWorkflow allgemein" title="SimpleWorkflow allgemein"/>
    <p class="klein"><strong>Abbildung 3.1:</strong> Grundübersicht des SimpleWorkflow</p>

    <p>
    Für die Erstellung einfacher Anwendungen, welche nur einen relativ primitiven Arbeitsablauf bedingen, war es
    notwendig ein Werkzeug zur Gestaltung dieser Abläufe anzubieten. So entstand die Idee des
    <code>SimpleWorkflow</code>. Eigentlich handelt es sich dabei gar nicht um einen Workflow, sondern eher um eine
    Menge von kleinen Werkzeugen, die über HTTP-Requests zu einem interaktiven Arbeitsablauf zusammengefügt werden
    können. Der Begriff <em>Workflow</em> soll dabei die Bearbeitungsebene zwischen dem ersten Erstellen eines
    Objektes, seiner Bearbeitung und der Ablage im Server sowie die dabei vor sich gehenden Arbeitsschritte beschreiben. Physisch handelt es
    sich um ein Verzeichnis <code>workflow</code>, unter welchem für jeden Objekttyp Unterverzeichnisse angelegt sind,
    in welchen die Daten zwischengespeichert werden. Konsultieren Sie zum besseren Verständnis auch die Beschreibung im
    MyCoRe-User Guide.
    </p>
    <p>
    Der SimpleWorkflow besteht im wesentlichen aus einer Sammlung von Servlets, die über HTTP-Requests angesprochen,
    verschiedene Bearbeitungsprozesse initiieren. Dabei wird gleichzeitig eine Berechtigungsprüfung für den Zugriff auf
    einzelne Aktionen durchgeführt. Für das Neuanlegen von Objekten ist die Permission 'create-'ObjectTyp bzw. für
    mandantenfähige Systeme 'create-'ObjectBase erforderlich.
    Ist das Objekt schon vorhanden, so entscheiden die ACL's des jeweiligen Objektes selbst über die Möglichkeit der Bearbeitung.
    </p>
    <table>
    <tr>
    <th>ACL-Permission</th>
    <th>Bedeutung</th>
    </tr>
    <tr>
    <td><code>writewf</code></td>
    <td>Gestattet das Bearbeiten der Objekte im Workflow (d. h. auf dem Plattenbereich).</td>
    </tr>
    <tr>
    <td><code>deletewf</code></td>
    <td>Gestattet das Löschen von Objekten im Workflow (d. h. auf dem Plattenbereich).</td>
    </tr>
    <tr>
    <td><code>writedb</code></td>
    <td>Gestattet das Bearbeiten von Objekten im Server.</td>
    </tr>
    <tr>
    <td><code>deletedb</code></td>
    <td>Gestattet das Löschen der Objekte aus dem Server.</td>
    </tr>
    </table>
    <p class="klein"><strong>Tabelle 3.1:</strong> Permissionliste für den SimpleWorkflow</p>
   </section>

   <section>
    <title>Bestandteile und Funktionen</title>
    <p>
    Der SimpleWorkflow besteht aus einer Reihe von Servlets. Die folgende Tabelle listet die Servlets auf.
    </p>
    <table>
    <tr>
    <th>Servlet</th>
    <th>Funktion</th>
    </tr>
    <tr>
    <td><code>MCRStartEditorServlet</code></td>
    <td>Das Servlet dient als Startpunkt für alle Arbeiten mit dem SimpleWorkflow.</td>
    </tr>
    <tr>
    <td><code>MCRCheckCommitDataServlet</code></td>
    <td>Wird vom Editor über ein &lt;target&gt;-Tag aufgerufen und schreibt die Metadaten nach Bearbeitung in den Server.</td>
    </tr>
    <tr>
    <td><code>MCRCheckEditDataServlet</code></td>
    <td>Wird vom Editor über ein &lt;target&gt;-Tag aufgerufen und schreibt die Metadaten nach deren Bearbeitung auf
    die Platte.</td>
    </tr>
    <tr>
    <td><code>MCRCheckNewDataServlet</code></td>
    <td>Wird vom Editor über ein &lt;target&gt;-Tag aufgerufen und schreibt die neuen Metadaten auf die Platte.</td>
    </tr>
    <tr>
    <td><code>MCRCheckCommitFileServlet</code></td>
    <td>Wird vom Editor über ein &lt;target&gt;-Tag aufgerufen und schreibt die Derivate-Daten nach Bearbeitung in den
    Server.</td>
    </tr>
    <tr>
    <td><code>MCRCheckNewFileServlet</code></td>
    <td>Wird vom Editor über ein &lt;target&gt;-Tag aufgerufen und schreibt die neuen Derivate-Daten auf die Platte.</td>
    </tr>
    <tr>
    <td><code>MCRFileListWorkflowServlet</code></td>
    <td>Listet die auf der Platte befindlichen Dateien in den Derivaten auf.</td>
    </tr>
    <tr>
    <td><code>MCRFileViewWorkflowServlet</code></td>
    <td>Gestattet den Zugriff auf eine Derivate-Datei auf der Platte.</td>
    </tr>
    <tr>
    <td><code>MCRListDerivateServlet</code></td>
    <td>Listet alle auf der Platte befindlichen Derivate auf.</td>
    </tr>
    <tr>
    <td><code>MCRListWorkflowServlet</code></td>
    <td>Erzeugt einen XML-Baum, welcher zur Darstellung des Workflow (Platteninhaltes) benötigt wird.</td>
    </tr>
    </table>
    <p class="klein"><strong>Tabelle 3.2:</strong> Übersicht der SimpleWorkflow-Servlets</p>
    <p>Die folgende Abbildung soll noch einmal die Beziehungen der einzelnen Teile verdeutlichen. Hier gibt es
    zwei Komplexe. Der erste arbeitet mit dem Plattenzwischenspeicher und stellt einen simplen <em>Workbasket</em> dar.
    In diesen Korb können Objekte neu eingestellt, bearbeitet, ergänzt, geprüft oder wieder gelöscht werden. Ist dieser
    Arbeitsschritt fertig, so kann das Objekt in den Server hoch geladen werden. Hier gibt es wieder die Möglichkeit, so
    der Nutzer die Berechtigung dazu hat, Objekte zu bearbeiten, zu verändern oder zu löschen. Diese Schritte arbeiten
    direkt gegen den Server. Ausgangspunkt aller Aktivitäten ist dabei das <code>MCRStartEditorServlet</code>. Hier wird
    beim Aufruf eine Aktion mitgegeben, welche den weiteren Ablauf bestimmt. Entweder werden jetzt die ToDo's direkt
    ausgeführt (Löschen) oder es wird z.B. eine Web-Seite mit einer Editor-Maske aufgerufen. Diese wiederum beinhaltet im
    &lt;target&gt;-Tag das zu nutzende Verarbeitungs-Servlet, welches dann je nach Aufgabe wieder zu einer Web-Seite oder
    der Workflow-Ansicht verzweigt. Um weitere Aktionen in eigene Anwendungen zu integrieren, muss nur eine Servlet erstellt
    werden, welches eine Ableitung vom <code>MCRStartEditorServlet</code> ist und die neuen Aktionen implementiert. Mit
    MyCoRe 2.0 besteht die Möglichkeit, statt der Angabe des Types nun den Base-Bestandteil der MCRObjectID, also
    <code>projectid_type</code> anzugeben. Damit können Permissions für gleiche Datenmodelltypen bei unterschiedlicher Projekt-ID
    einzeln abgesichert werden.
    </p>

    <img src="images/progguide_simpleworkflow_2.png" alt="SimpleWorkflow" title="SimpleWorkflow"/>
    <p class="klein"><strong>Abbildung 3.2:</strong> Ablaufschema im SimpleWorkflow</p>

   </section>

   <section>
    <title>Installation</title>
    <p>
    In DocPortal sind die Funktionen bereits standardmäßig integriert. Bei der Verwendung in anderen Applikationen
    sind die nacholgenden Schritte auszuführen:
    </p>
    <ol>
    <li>die folgende Zeile ist in das XSL-Stylesheet zu kopieren, welches die Auswertung Ihrer XML-Webseiten
        realisiert (z.B. <code>MyCoReWebPage.xsl</code>).<br/>
        <code>&lt;xsl:include href="workflow.xsl" /&gt;</code>
    </li>
    <li>Weiterhin finden Sie im Kern unter <code>components/swf/xsl</code> das Stylesheet <code>mycoreobject-to-workflow.xsl</code>.
        Dieses ist eine Transformationsvorlage für die Transformation von den XML-Objekt-Metadaten in eine
        SimpleWorkflow-interne XML Struktur. Für jeden Ihrer Metadaten-Typen muss eine solche Konverter-Datei mit
        Namen <code>mycoreobject-&lt;type&gt;-to-workflow.xsl</code> in Ihrer Anwendung vorhanden sein.
    </li>
    <li>Als letztes muss der Workflow in eine XML-Webseite integriert und diese entsprechend über Menüpunkte aufgerufen werden. Aufgerufen
        wird ein Workbasket mit der eingebetteten Zeile<br/>
        <code>&lt;workflow base="MCRObjectID.Base" step="editor" /&gt;</code> oder <br />
        <code>&lt;workflow type="MCRObjectID.Type" step="editor" /&gt;</code>
    </li>
    </ol>

    <p>
    Die Integration des SimpleWorkflow in die Präsentationsseiten erfolgt unter Einbeziehung der bereitgestellten Icons
    und eines dahinter liegenden Links. Dieses kann an beliebiger Stelle in der Präsentation platziert werden. Da die
    einzelnen Aktionsaufrufe sich in ihren Parametern doch erheblich unterscheiden sollten bei Bedarf die relevanten
    die entsprechenden Aufrufe im DocPortal-Beispiel zu Rate gezogen werden.
    </p>
    <pre class="brush: xml"><![CDATA[
    <a href="{$ServletsBaseURL}MCRStartEditorServlet{$HttpSession}?
       tf_mcrid={$mcrid}&amp;       - MCRObjectID
       se_mcrid={$mcrid}&amp;       - MCRObjectID
       re_mcrid={$mcrid}&amp;       - Return MCRObjectID, nur für Derivate-ToDo, optional
       type={$type}&amp;            - MCRObjectID Typ, alte Variante, ggf. optional
       project={$project}&amp;      - MCRObjectID Base, neu, überschreibt type
       step=commit&amp;             - Arbeitsschritt
       todo=seditobj&amp;           - ToDo
       layout={$layout}"            - optional
    >
    <img
       src="{$WebApplicationBaseURL}images/static/workflow_objedit.gif"
       title="{$OMD.EditorEdit}"/>
    </a>
    ]]>
    </pre>

    <p>
    Die Einbindung in den Editor erfolgt mit den folgenden Zeilen.
    </p>
    <pre class="brush: xml"><![CDATA[
    <target type="servlet" name="MCRCheckNewDataServlet" method="post" format="xml" />
    oder
    <target type="servlet" name="MCRCheckEditDataServlet" method="post" format="xml" />
    oder
    <target type="servlet" name="MCRCheckCommitDataServlet" method="post" format="xml" />
    ]]>
    </pre>

   </section>

   <section>
    <title>Konfiguration</title>
    <p>
    Die Konfiguration des SimpleWorkflow beschränkt sich auf einige wenige Dinge. Für MyCoRe 2.0
    kann alternativ entweder auf den MCRObjectID.Type (alt) oder MCRObjectID.Base (neu)
    referenziert werden. Für jede Installation können einige Werte different sein, so dass
    es sich empfiehlt, diese in der <code>mycore.private.properties</code> abzulegen.
    Ein großer Teil der vom <code>MCRStartEditorServlet</code> veranlassten Aktionen ist so
    implementiert, dass Sie auf Wunsch eine E-Mail an eine oder mehrere E-Mail-Adressen schicken können. Wenn Sie für
    den Konfigurationswert, welcher durch das Paar <code>[MCRObjectID.Base|MCRObjectID.Type].[todo]</code>
    beschrieben wird, nichts angeben, so wird die E-Mail unterdrückt. Alle Angaben in diesem
    Konfigurationsabschnitt sind selbsterklärend. Anzugeben sind:
    </p>
    <ul>
    <li>allgemeine Angaben zur Mailverteilung</li>
    <li>die Verzeichnisnamen des Plattenspeichers,</li>
    <li>die Mail-Verteilung</li>
    </ul>
    <pre class="brush: shell"><![CDATA[
    ##################################################################
    #  SimpleWorkflow                                                #
    ##################################################################

    # Generic mail configuration for MCRMailer
    # The server for outgoing mails
    MCR.Mail.Server=mail.mycore.de
    # The mail protocol
    MCR.Mail.Protocol=smtp
    # The debug option
    MCR.Mail.Debug=false
    # Encoding for the mail
    MCR.Mail.Encoding=UTF-8
    # Number of send tries to send the mail : 0 – off or n tries
    MCR.Mail.NumTries=1
    # Editor Mail adresses for Messages add1@serv1,add2,@serv2,...
    MCR.Mail.Address=mycore@mail.mycore.de

    # Editor path for directories
    MCR.SWF.Directory.base=%MCR.basedir%/data/workflow
    MCR.SWF.Directory.[MCRObjectID.Base|MCRObjectID.Type]=%MCR.basedir%
        /data/workflow/[MCRObjectID.Base|MCRObjectID.Type]
    ...

    # Editor flags for base/type and todo
    MCR.SWF.Mail.[MCRObjectID.Base|MCRObjectID.Type].
        [todo]=%MCR.Mail.Address%
    ...

    ]]>
    </pre>
   </section>

   <section>
    <title>Ergänzung eigener ToDo's</title>
    <p>
    Das MCRStartEditorServlet gestattet eine Erweiterung mit eigenen Funktionen durch einfache Vererbung. Erstellen Sie
    eine Klasse MCRStartEditorServletMyToDo als Ableitung des MCRStartEditorServlet. Hierin können Sie nun Methoden
    definieren, welche als ToDo direkt aufgerufen werden können. Entsprechend der Konfiguration können dann auch Mails
    versendet werden.
    </p>
    <pre class="brush: java"><![CDATA[
package org.mycore.frontend.servlets;

import java.io.IOException;

/**
 * The class extends the MCRStartEditorServlet with a new method
 *
 * @author Jens Kupferschmidt
 */
public class MCRStartEditorServletMyToDo extends MCRStartEditorServlet {

    private static final long serialVersionUID = 1L;

    /**
     * A new method. The access right is writedb.
     *
     * @param job
     *            the MCRServletJob instance
     * @param cd
     *            the common data part
     */
    public void mytodo(MCRServletJob job, CommonData cd) throws IOException {
        // access right
        if (!MCRAccessManager.checkPermission(cd.mysemcrid, "writedb")) {
            job.getResponse().sendRedirect(job.getResponse().encodeRedirectURL(getBaseURL() + usererrorpage));
            return;
        }

        /** ToDo code */

        // back to the metadata view
        StringBuffer sb = new StringBuffer();
        sb.append(getBaseURL()).append("receive/").append(cd.mysemcrid);
        job.getResponse().sendRedirect(job.getResponse().encodeRedirectURL(sb.toString()));
    }

}
    ]]>
    </pre>
   </section>

   <section>
    <title>Ergänzung eigener Datenmodell-Datentypen</title>
    <p>
    Werden dem bereits vorhandenen allgemeinen Datenmodell neue bzw. ergänzende Typen
    hinzugefügt, so muss die Prüfung und Vervollständigung des Output Validators für den Editor
    erweitert werden. Dazu muss in der Klasse <code>MCREditorOutValidator</code> eine
    Methode für die Klasse eingefügt werden. Die Klasse prüft den Output des Editor Framework
    und ergänzt fehlende Namespaces (z. B. für xml:lang).
    </p>
    <pre class="brush: java"><![CDATA[
    /**
     * @param datasubtag
     */
    boolean checkMCRMetaXYZ(Element datasubtag) {
        return checkMetaObject...(datasubtag, MCRMetaXYZ.class);
    }
    ]]>
    </pre>
   </section>
  </section>

  <section>
   <title>Das SimpleWorkflow-System zur interaktiven Autorenarbeit</title>
   <p>
   Das SimpleWorkflow-System wurde entwickelt, um mit einem einfachen Werkzeug die interaktive Autoren- und
   Editorenarbeit zu ermöglichen und damit eine sinnvolle Arbeit mit einer MyCoRe-Applikation zu ermöglichen. Es ist
   jedoch so konzipiert, dass es auch über eine Servlet-Schnittstelle in größere Workflow-Engines eingebunden werden
   kann. Einen Workflow im eigentlichen Sinne gibt es nur sehr eingeschränkt und in einfachem Ablauf. Weiterführende
   organisatorische Maßnahmen waren auch nicht Ziel dieser Entwicklung.
   </p>
   <p>
   Die Komponente wurde in ein Modul verlagert und ist somit durch andere Komponenten ersetzbar.
   Eine genaue Beschreibung der Details zur Integration finden Sie im
   <a href="site:appdev_2_1">Programmer Guide</a>. Die wichtigsten Merkmale dieses Moduls sind:
   </p>
   <ul>
   <li>Mit dem System kann ein einfacher Eingabe- und Bearbeitungs-Dialog realisiert werden.</li>
   <li>Eingabe und Bearbeitung werden durch eine Rechtekontrolle mittels des ACL-System realisiert.
       Nur berechtigte Benutzer dürfen die Daten verändern.</li>
   <li>Die Zwischenspeicherung aller eingehenden Daten erfolgt zuerst auf einem Plattenbereich, so dass bei
       Fehlern ggf. auch der Administrator direkt eingreifen kann. Daten die erfolgreich in den Server geladen
       wurden, werden aus diesem Plattenbereich gelöscht.</li>
   <li>Das System benutzt die MyCoRe-interne Editor-Komponente.</li>
   <li>Das System basiert auf einer Reihe von Servlets, XML-Seiten und Stylesheets, sowie der Einbindung in die
       Editor-Formulare.</li>
   <li>Alle Funktionen werden über ein einheitliches Servlet initiiert (<code>MCRStartEditorServlet</code>).
       Die möglichen Aufrufe sind weiter unten notiert.</li>
   </ul>

   <img src="images/userguide_simpleworkflow_1.jpg" alt="Funktionsschema SimpleWorkflow" />
    <p class="klein"><strong>Abbildung 6.1:</strong> Funktionsschema des SimpleWorkflow</p>

   <section>
    <title>Das MCRStartEditorServlet</title>
    <p>
    Dieses Servlet ist der Einstiegspunkt für die Nutzung des SimpleWorkflow-Systems. Von ihm aus werden alle
    Verarbeitungsprozesse angestoßen. Das Servlet seinerseits startet dann wieder Web-Dialoge oder führt selbstständig
    Aktionen aus. Dabei sind die folgenden Startparameter von Interesse:
    </p>

    <table>
    <tr>
    <th>Parameter</th>
    <th>Bedeutung</th>
    </tr>
    <tr>
    <td>todo</td>
    <td>Zeigt an, welche Aktion auszuführen ist.</td>
    </tr>
    <tr>
    <td>type</td>
    <td>Gibt den Datenmodell-Typ des Metadaten-Objektes an.</td>
    </tr>
    <tr>
    <td>step</td>
    <td>Gibt den Verarbeitungsschritt an (z. B. author, editor, commit).</td>
    </tr>
    <tr>
    <td>layout</td>
    <td>Gestattet eine verfeinerte Angabe des Verarbeitungsschrittes (ist optional).</td>
    </tr>
    <tr>
    <td>tf_mcrid</td>
    <td>Enthält eine MCRObjektID, welche neu hinzugekommen und/oder dem System noch nicht bekannt ist.
    Die Gültigkeit wird geprüft.</td>
    </tr>
    <tr>
    <td>se_mcrid</td>
    <td>Enthält eine MCRObjectID, welche aus einem Datensatz oder ähnlichen Quellen extrahiert wurde und gültig
    sein sollte.</td>
    </tr>
    <tr>
    <td>re_mcrid</td>
    <td>Enthält eine weitere MCRObjectID, welche aus einem Datensatz oder ähnlichen Quellen extrahiert wurde und
    gültig sein sollte (z.B. zugehöriger Metdatensatz).</td>
    </tr>
    <tr>
    <td>extparm</td>
    <td>Erweiterungsparameter, wie in einigen wenigen Fällen benutzt.</td>
    </tr>
    </table>
    <p class="klein"><strong>Tabelle 6.3:</strong> Parameter des MCRStartEditorServlets</p>

    <p>
    Die nächsten Tabellen sollen eine Übersicht der möglichen Aktionen geben. Jede Aktion ist dabei an eine
    entsprechende Berechtigung gebunden, welche der aktuelle Benutzer gerade haben muss. Hat er sie nicht, so wird
    seine Aktion abgewiesen und nicht ausgeführt. Dabei wird noch nach dem Datenmodell-type unterschieden, d.h.
    ein Benutzer muss für genau diesen type auch die Berechtigung haben. Die Aktionen unterscheiden sich in dem
    Ziel-Store, todo=w... steht für den Plattenbereich; todo=s... arbeitet mit den bereits eingestellten Server-Daten.
    Der Parameter layout ist optional und dient der Verfeinerung der möglichen Arbeitsschritte. Während alle Aktionen,
    die mit einem w beginnen auf dem Plattenbereich (workflow) arbeiten, veranlassen alle Aktionen mit s einen Zugriff
    und Änderungen im Server-System.
    </p>

    <table>
    <tr>
    <th>Aktion</th>
    <th>todo</th>
    <th>ID</th>
    <th>Permission</th>
    <th>ruft</th>
    </tr>
    <tr>
    <td>Anlegen neuer Metadaten </td>
    <td>wnewobj</td>
    <td>tf_mcrid</td>
    <td>create-type</td>
    <td>editor_form_author-type[-layout].xml</td>
    </tr>
    <tr>
    <td>Anlegen eines Neuen Derivates </td>
    <td>wnewder</td><td>se_mcrid</td>
    <td>create-type</td>
    <td>MCRStartEditorServlet?todo=waddfile</td>
    </tr>
    <tr>
    <td>Hinzufügen neuer Dateien aus dem Upload</td>
    <td>waddfile</td>
    <td>se_mcrid re_mcrid</td>
    <td>writewf</td>
    <td>fileupload_new.xml</td>
    </tr>
    <tr>
    <td>Bearbeiten von Metadaten </td>
    <td>weditobj</td><td>se_mcrid</td>
    <td>writewf</td>
    <td>editor_form_type_[layout_]editor.xml</td>
    </tr>
    <tr>
    <td>Bearbeiten des Label eines Derivate-Metadaten-Satzes</td>
    <td>weditder</td><td>se_mcrid re_mcrid</td>
    <td>writewf</td>
    <td>editor_form_derivate_editor.xml</td>
    </tr>
    <tr>
    <td>Löschen aller Daten eines Objektes </td>
    <td>wdelobj</td>
    <td>se_mcrid</td>
    <td>deletewf</td>
    <td>editor_type_editor.xml</td>
    </tr>
    <tr>
    <td>Löschen eines Derivates </td>
    <td>wdelder</td>
    <td>se_mcrid</td>
    <td>deletewf</td>
    <td>editor_type_editor.xml</td>
    </tr>
    <tr>
    <td>Löschen einer Datei aus einem Derivate</td>
    <td>wdelfile</td>
    <td>se_mcrid</td>
    <td>writewf</td>
    <td>editor_type_editor.xml</td>
    </tr>
    <tr>
    <td>Setzen der Hauptdatei in einem Derivate</td>
    <td>wsetfile</td><td>se_mcrid</td><td>writewf</td>
    <td>editor_type_editor.xml</td>
    </tr>
    <tr>
    <td>Hochladen eines Datensatzes vom Plattenbereich zum Server</td>
    <td>wcommit</td>
    <td>se_mcrid</td>
    <td>writedb</td>
    <td>MCRQueryServlet mit der ID mit mode=ObjectMetadata</td>
    </tr>
    </table>
    <p class="klein"><strong>Tabelle 6.4:</strong> Mögliche Aktionen mit dem MCRStartEditorServlet auf dem Plattenbereich</p>

    <table>
    <tr>
    <th>Aktion</th>
    <th>todo</th>
    <th>ID</th>
    <th>Permission</th>
    <th>ruft</th>
    </tr>
    <tr>
    <td>Bearbeiten der Metadaten</td>
    <td>seditobj</td>
    <td>se_mcrid</td>
    <td>writedb</td>
    <td>MCRQueryServlet mit der ID mit mode=ObjectMetadata</td>
    </tr>
    <tr>
    <td>Bearbeiten des Label der Derivate-Metadaten </td>
    <td>seditder</td>
    <td>se_mcrid re_mcrid</td>
    <td>writedb</td>
    <td>editor_form_commit_derivate.xml</td>
    </tr>
    <tr>
    <td>Löschen eines Datenobjekts</td>
    <td>sdelobj</td>
    <td>se_mcrid</td>
    <td>deletedb</td>
    <td>editor_deleted.xml</td>
    </tr>
    <tr>
    <td>Löschen eines Derivates von einem Datenobjekt</td>
    <td>sdelder</td>
    <td>se_mcrid re_mcrid</td>
    <td>deletedb</td>
    <td>MCRQueryServlet mit der ID mit mode=ObjectMetadata</td>
    </tr>
    <tr>
    <td>Hinzufügen eines neuen Derivates zu einem Datenobjekt des Servers; Zwischenablage der Daten auf dem
    Plattenbereich</td>
    <td>snewder</td>
    <td>re_mcrid</td>
    <td>writedb</td>
    <td>MCRStartEditorServlet?todo=saddfile</td>
    </tr>
    <tr>
    <td>Hinzufügen von Daten zu einem Derivate aus dem Server; Zwischenablage der Daten auf dem Plattenbereich</td>
    <td>snewfile</td>
    <td>se_mcrid re_mcrid</td>
    <td>writedb</td>
    <td>MCRStartEditorServlet?todo=saddfile</td>
    </tr>
    <tr>
    <td>Upload von Datenobjekten in die Zwischenablage</td>
    <td>saddfile</td>
    <td>se_mcrid re_mcrid</td>
    <td>writedb</td>
    <td>MCRStartEditorServlet?todo=scommitder</td>
    </tr>
    <tr>
    <td>Setzen Des Label in einem Derivate</td>
    <td>ssetlabel</td>
    <td>se_mcrid re_mcrid</td>
    <td>writedb</td>
    <td>MCRQueryServlet mit der ID mit mode=ObjectMetadata</td>
    </tr>
    <tr>
    <td>Setzen der Main File Markierung im Derivate</td>
    <td>ssetfile</td>
    <td>se_mcrid re_mcrid</td>
    <td>writedb</td>
    <td>MCRFileNodeServlet mit der ID des Derivates</td>
    </tr>
    <tr>
    <td>löschen einer Datei aus einem Derivate</td>
    <td>sdelfile</td>
    <td>se_mcrid re_mcrid</td>
    <td>writedb</td>
    <td>MCRFileNodeServlet mit der ID des Derivates</td>
    </tr>
    </table>
    <p class="klein"><strong>Tabelle 6.5:</strong> Mögliche Aktionen mit dem MCRStartEditorServlet im Server</p>

   </section>

   <section>
    <title>Abläufe für neue Datenobjekte</title>
    <p>
    Die Abläufe für die Eingabe neuer Datensätze sind praktisch für alle Datenmodelle gleich. Lediglich die Anbindung
    der Derivate an die Metadaten-Objekte ist nicht immer gegeben. Das hängt allein an der Gestaltung des jeweiligen
    Datenmodell-Konzeptes für ein Projekt (z.B. haben Personendaten im DocPortal-Projekt keine eigenen Derivate).
    Wird beim SimpleWorkflow ein neues Objekt eingestellt, so befinden sich alle relevanten Daten vorerst auf einem
    Plattenbereich, der über die Konfiguration festgelegt wird. Erst wenn das Commit (Laden) zum Server-System ausgeführt
    wurde, werden die Daten von diesem Zwischenspeicher wieder gelöscht. Jeder Datenmodell-type hat dabei in der Regel
    ein eigenes Verzeichnis innerhalb des Workflow-Plattenbereiches.
    </p>
   </section>

   <section>
    <title>Abläufe für Datenobjekte aus dem Server</title>
    <p>
    Wurden Datenobjekte in den Server eingebracht, so steht Benutzern, welche berechtigt sind, die Möglichkeit einer
    Änderung der Daten und/oder das Löschen der selben frei. Für das Bearbeiten der Daten werden diese zwischenzeitlich
    auf dem Plattenbereich gespeichert. Bei erfolgreicher Beendigung einer Aktion werden die temporären Daten wieder vom
    Plattenbereich gelöscht. Im Falle eines Fehlers kann über den Zugriff auf den Plattenbereich (Workflow) und
    entsprechender Aktionen der Fehler behoben werden. Alle Commits sind als Update ausgelegt, so dass ältere Versionen
    im Server auch bei einem Commit vom Workflow als Folge eines Fehlers überschrieben werden. Einzelheiten zu den
    Abläufen finden Sie im <a href="site:appdev_2_1">Programmer Guide</a>.
    </p>
   </section>

   <section>
    <title>Einbindung in das Access Control List - System</title>
    <p>
    In den Bearbeitungsstufen gibt es jeweils einen Button, welcher es gestattet, die ACL's (Access Control Lists –
    Zugriffslisten) zu ändern. Dies geschieht über zusätzliche Eingabemasken. Alle Änderungen wirken direkt und sofort.
    </p>
   </section>
 </section>
</body>
</document>

