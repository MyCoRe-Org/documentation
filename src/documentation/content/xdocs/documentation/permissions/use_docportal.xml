<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">

<document>
  <header>
    <title>Die Arbeit mit der Beispielanwendung</title>
  </header>
<body>

   <section>
    <title>Benutzer der Beispielanwendung</title>
    <p>
    Die Beispielanwendung bringt zur Demonstration bereits eine Reihe von Benutzern und Gruppen mit. Einer Gruppe
    können dabei mehrere Benutzer angehören. Die Vergabe von Rechten auf Objekte kann dann sowohl für einen einzelnen
    Benutzer als auch für eine ganze Gruppe erfolgen. Im <a href="#ACL">Abschnitt "Zugriffsrechte auf Daten"</a> wird dieses Zugriffssystem (ACL-System) näher
    erläutert.
    </p>

    <table>
    <tr>
    <th>Gruppe</th>
    <th>Beschreibung</th>
    </tr>
    <tr>
    <td>root</td>
    <td>Die Gruppe der Superuser</td>
    </tr>
    <tr>
    <td>admingroup</td>
    <td>Die Gruppe der Systemadministratoren</td>
    </tr>
    <tr>
    <td>readergroup1</td>
    <td>Eine Gruppe von Lesern der 1. Einrichtung (nur Leserechte für Objekte der Gruppe)</td>
    </tr>
    <tr>
    <td>readergroup2</td>
    <td>Eine Gruppe von Lesern der 2. Einrichtung (nur Leserechte für Objekte der Gruppe)</td>
    </tr>
    <tr>
    <td>authorgroup1</td>
    <td>Eine Gruppe von Autoren der 1. Einrichtung (Autorenrechte nur auf die eigenen Objekte)</td>
    </tr>
    <tr>
    <td>authorgroup2</td>
    <td>Eine Gruppe von Autoren der 2. Einrichtung (Autorenrechte nur auf die eigenen Objekte)</td>
    </tr>
    <tr>
    <td>editorgroup1</td>
    <td>Eine Gruppe von Editoren der 1. Einrichtung (Bearbeiter aller Objekte einer Einrichtung)</td>
    </tr>
    <tr>
    <td>editorgroup2</td>
    <td>Eine Gruppe von Editoren der 2. Einrichtung (Bearbeiter aller Objekte einer Einrichtung)</td>
    </tr>
    <tr>
    <td>gastgroup</td>
    <td>Die Gruppe der Gäste</td>
    </tr>
    </table>
    <p class="klein"><strong>Tabelle 6.1:</strong> Beispielgruppen in DocPortal</p>

    <table>
    <tr>
    <th>Benutzer</th>
    <th>Gruppe</th>
    <th>Passwort</th>
    </tr>
    <tr>
    <td>root</td>
    <td>rootgroup</td>
    <td>alleswirdgut</td>
    </tr>
    <tr>
    <td>administrator</td>
    <td>admingroup</td>
    <td>alleswirdgut</td>
    </tr>
    <tr>
    <td>editor1A</td>
    <td>editorgroup1</td>
    <td>editor1A</td>
    </tr>
    <tr>
    <td>editor1B</td>
    <td>editorgroup1</td>
    <td>editor1B</td>
    </tr>
    <tr>
    <td>editor2A</td>
    <td>editorgroup2</td>
    <td>editor2A</td>
    </tr><tr>
    <td>editor2B</td>
    <td>editorgroup2</td>
    <td>editor2B</td>
    </tr>
    <tr>
    <td>author1A</td>
    <td>authorgroup1</td>
    <td>author1A</td>
    </tr>
    <tr>
    <td>author1B</td>
    <td>authorgroup1</td>
    <td>author1B</td>
    </tr>
    <tr>
    <td>author2A</td>
    <td>authorgroup2</td>
    <td>author2A</td>
    </tr>
    <tr>
    <td>author2B</td>
    <td>authorgroup2</td>
    <td>author2B</td>
    </tr>
    <tr>
    <td>reader1A</td>
    <td>readergroup1</td>
    <td>reader1A</td>
    </tr>
    <tr>
    <td>reader2A</td>
    <td>readergroup2</td>
    <td>reader2A</td>
    </tr>
    <tr>
    <td>gast</td>
    <td>gastgroup</td>
    <td>gast</td>
    </tr>
    </table>
    <p class="klein"><strong>Tabelle 6.2:</strong> Beispielbenutzer in DocPortal</p>

   </section>

  <anchor id="ACL" />
  <section>
   <title>Zugriffsrechte auf Daten</title>
   <p>
   Alle in MyCoRe gespeicherten Objekte besitzen einen Zugriffsschutz über Access Control Lists (ACL).
   Dieser Schutzmechanismus ordnet jedem Objekt eine Reihe von Attributen zu, welche als Bedingung erfüllt sein müssen,
   damit der Zugriff auf das Objekt gewährt wird. Der Vergleich der in den ACL's gespeicherten Voraussetzungen gegen
   den aktuellen Zustand des Zugriffs erfolgt mittels der Sitzung (Session). In ihr werden alle Umgebungsinformationen
   wie zugreifende IP, Benutzer, usw. gespeichert. Das für MyCoRe implementierte ACL-System kennt drei Attribute für die
   Auswertung.
   </p>
   <ul>
   <li>Benutzer</li>
   <li>Gruppen</li>
   <li>Netzadressen in Form von IP's bzw. IP-Blöcken</li>
   </ul>
   <p>
   Bei der interaktiven Eingabe neuer Daten werden standardmäßig im Projekt festgelegte Zugriffsregeln vorgegeben.
   Diese trennen sich in die Bereiche Lesen und Bearbeiten. Im Bereich des Bearbeitens wird wiederum in die Arbeit im
   Workflow und im Server-System unterschieden. Hier können jeweils die Arbeitsgänge Editieren und Löschen getrennt
   voneinander festgelegt werden. Für DocPortal sind folgende Berechtigungen (Permissions) definiert:
   </p>
   <ul>
   <li>read – gestattet den lesenden Zugriff</li>
   <li>writewf – gestattet das Schreiben bzw. Ändern, solange das Objekt im Simple Workflow (SWF) ist</li>
   <li>deletewf – gestattet das Löschen, solange das Objekt im Simple Workflow (SWF) ist</li>
   <li>writedb – gestattet das Schreiben bzw. Ändern, wenn das Objekt im Server ist</li>
   <li>deletedb - gestattet das Löschen, wenn das Objekt im Server ist</li>
   </ul>
   <p>
   Die Permissions werden in der Editor-Verarbeitung des Neuanlegens eines Datensatzes aus einem Standard-ACL-Datensatz
   erzeugt. Hierzu kommt die Berechtigung des aktuellen Autors zu allen Bearbeitungsfunktionen. Die Leserechte sind für
   alle Benutzer zugelassen. Diese Einstellung gilt konkret für die Docportal-Anwendung. Für eigene Projekte kann dies
   ganz anders definiert werden. Die Permissions werden im Workflow-Prozess direkt im Datensatz gespeichert. Die
   Notation der Zugriffsregeln im Datenabschnitt <em><strong>services</strong></em> ist als Datentyp
   <em><strong>MCRMetaAccessRule</strong></em> im <a
   href="/documentation/version21/userguide/08_more_information.html#XML-Syntax+des+XML-Knotens+service">Abschnitt "Syntax
   des XML-Knotens service"</a> näher beschrieben. Beim Einstellen (Hochladen) der Objekte
   in den Server werden die Regeln <strong>writewf</strong> und <strong>deletewf</strong> vollständig entfernt, da sie
   nicht mehr benötigt werden. Alle anderen Zugriffsregeln werden im MyCoRe-ACL-System in die Datenbank eingetragen
   und anschließend aus dem Originaldatensatz gelöscht. Damit ist das Objekt gesichert, ein Zugriff darauf benötigt
   nun immer die Zustimmung der ACL-Komponente. Eine Änderung der Permissions kann nun nur noch bei einer
   Schreibberechtigung erfolgen. Die interaktiven Komponenten von DocPortal bieten hier ein Aktionsfeld mit einem
   Editor-Formular an. <strong>Nutzer der Gruppe admingroup sind immer für den Zugriff berechtigt, auch wenn dies nicht
   explizit angegeben ist.</strong>
   </p>
   <p>
   Um den einzelnen digitalen Objekten ggf. eine höhere Sicherheit zu geben, können ergänzende Permissions in den
   Derivate-XML-Daten angegeben werden. Bei einem Zugriff wird zuerst geprüft, ob Zugriffsrechte für den Metadatensatz
   bestehen, anschließend wird geprüft ob es zusätzliche Einschränkungen aus dem Derivate gibt. Standardmäßig ist im
   Derivate immer die Permission '<strong>true</strong>' gesetzt, was keinen weiteren Einschränkungen entspricht.
   </p>
   <p>
   Das ACL-System gestattet prinzipiell eine beliebige Sicherung mit anwendungsspezifischen Kriterien. Im
   <a href="site:appdev_2_1">Programmer Guide</a> finden Sie detaillierte Informationen zur
   Weiterentwicklung Ihrer eigenen Applikationen.
   </p>
  </section>


   <section>
    <title>Kommandos zur Arbeit mit der Benutzerverwaltung </title>
    <p>
    Eine Gruppe der verfügbaren Kommandos der Kommandozeilenschnittstelle ermöglicht die Verwaltung von Benutzern und
    Gruppen. Diese Kommandos werden im folgenden vorgestellt. Oft werden bei den Kommandos XML-Dateien mit Definitionen
    von Benutzern oder Gruppen erwartet. Die Syntax dieser XML-Beschreibungen finden Sie im
    <a href="site:appdev_2_1">Programmer Guide</a>. Es werden derzeit nur die wichtigsten
    Geschäftsprozesse der Benutzerverwaltung in den folgenden Kommandos abgebildet.
    Der Schwerpunkt liegt auf einem Management-Interface für administrativen Zugriff. Die vollständige GUI der
    Benutzerverwaltung (geplant für eine spätere Version) wird die Möglichkeit einer Bearbeitung aller Geschäftsprozesse
    bieten.
    </p>

    <section>
    <title>Allgemeine Verwaltungskommandos</title>
    <anchor id="superuser" />

    <dl class="kasten">
    <dt><code>init superuser</code></dt>
    <dd>Dieses Kommando wird einmalig bei der Installation und Konfiguration des MyCoRe-Systems verwendet. Dabei werden
    Daten über den zu verwendenden Administrations-Account und den Gast-Account aus den Konfigurationsdateien gelesen,
    sowie das Benutzersystem initialisiert.</dd>
    <dt><code>check user data consistency</code></dt>
    <dd>Dieses Kommando dient zur Kontrolle der Konsistenz des Benutzersystems. Alle Verbindungen zwischen Benutzern
    und Gruppen werden kontrolliert und Unregelmäßigkeiten, die eventuell durch den Import von Daten (
    siehe weiter unten) entstanden sind, werden ausgegeben.</dd>
    <dt><code>set user management to ro mode</code></dt>
    <dd></dd>
    <dt><code>set user management to rw mode</code></dt>
    <dd>Mit diesen Kommandos können die Daten der Benutzerverwaltung eingefroren werden. Dies sollte vor dem
    Exportieren von Daten in XML-Dateien geschehen, damit sich nicht während des Exports Daten geändert oder Objekte
    angelegt werden.</dd>
    </dl>
    </section>

    <section>
    <title>Kommandos zum Anlegen und Ändern von Gruppen und Benutzern aus XML-Dateien</title>

    <dl class="kasten">
    <dt><code>create user data from file {0}</code></dt>
    <dd></dd>
    <dt><code>create group data from file {0}</code></dt>
    <dd>Diese Kommandos erwarten eine XML-Datei als Parameter. In der Datei müssen ein oder mehrere Definitionen von
    Benutzern oder Gruppen existieren, die dann in das System übernommen werden. Ein Benutzerpasswort muss im Klartext
    in der definierenden XML-Datei vorliegen (für die Syntax siehe den
    <a href="site:appdev_2_1">Programmer Guide</a>). Ist die Passwortverschlüsselung eingeschaltet
    (siehe <a href="#mpp">mycore.private.properties</a>), so wird das Passwort bei der Ablage in
    der Datenbank verschlüsselt. Bei der Erzeugung der Objekte wird die Korrektheit der Eingaben bezüglich vorhandener
    Regeln überprüft. So wird z.B. getestet, ob IDs doppelt vergeben wurden.</dd>
    <dt><code>import user system from files {0} {1}</code></dt>
    <dd>Dieses Kommando dient der Rekonstruktion des User Systems aus den abgesicherten Daten der Benutzer und Gruppen.
    Da eine direkte Abhängigkeit zwischen beiden Teilen besteht werden alle Daten mittels eines gemeinsamen
    Kommandos verarbeitet. Dabei ist {0} die Guppen- und {1} die Benutzerdatei der Sicherung.</dd>
    <dt><code>update user data from file {0}</code></dt>
    <dd>Mit diesen Befehlen werden bereits vorhandene Benutzer aktualisiert. Dabei ist zu bedenken, dass „update“ im
    Sinne von „festsetzen auf neue Werte“ zu verstehen ist, die Objekte also nach dem update genau die Definitionen
    haben, die in den XML-Dateien festgelegt werden. Einige der Attribute können allerdings nicht verändert werden,
    z.B. die Erzeuger-Accounts oder das Datum der Erzeugung. Sollen diese Daten unbedingt verändert werden, dann
    müssen die Objekte vorher gelöscht und neu angelegt werden.</dd>
    <dt><code>export all users to file {0}</code></dt>
    <dd></dd>
    <dt><code>export all groups to file {0}</code></dt>
    <dd></dd>
    <dt><code>export user {0} to file {1}</code></dt>
    <dd></dd>
    <dt><code>export group {0} to file {1}</code></dt>
    <dd>Mit diesen Kommandos werden alle oder einzelne Objekte der Benutzerverwaltung in XML-Dateien gespeichert.
    Passwörter von Benutzern werden bei eingeschalteter Verschlüsselung verschlüsselt abgelegt. Die so entstandenen
    Dateien können beispielsweise mit den import-Kommandos wieder geladen werden.</dd>
    <dt><code>encrypt passwords in user xml file {0} to file {1}</code></dt>
    <dd>Passwortverschlüsselung kann durch einen Konfigurationsparameter in der Datei mycore.properties.user aktiviert
    oder deaktiviert werden. Dieses Kommando wird benötigt, wenn man ein bestehendes System mit nicht eingeschalteter
    Verschlüsselung auf ein System mit Verschlüsselung migrieren will. Dabei verfährt man folgendermaßen: Zunächst
    werden alle Benutzer des alten Systems mit dem Kommando (siehe oben) export all users to file in eine XML-Datei
    exportiert. Daraufhin wendet man encrypt passwords in user xml file {0} to file {1} auf diese Datei an und erhält
    damit verschlüsselte Passwörter in den XML-Dateien. Mit dem Kommando (siehe oben) update user data from file
    können diese Daten in das System reintegriert werden. Danach muss die Kommandozeilenschnittstelle geschlossen und
    die Verschlüsselung in mycore.properties.user eingeschaltet werden.</dd>
    </dl>
    </section>

    <section>
    <title>Kommandos zum direkten Arbeiten mit Objekten der Benutzerverwaltung</title>

    <dl class="kasten">
    <dt><code>delete user {0}</code></dt>
    <dd></dd>
    <dt><code>delete group {0}</code></dt>
    <dd>Durch Angabe des Benutzer- oder Gruppennamens werden die Objekte mit diesen Kommandos aus dem System entfernt
    (und abhängige Objekte aktualisiert).</dd>
    <dt><code>list all users</code></dt>
    <dd></dd>
    <dt><code>list user {0}</code></dt>
    <dd></dd>
    <dt><code>list all groups</code></dt>
    <dd></dd>
    <dt><code>list group {0}</code></dt>
    <dd>Die Kommandos dienen dem Auflisten der Objekte der Benutzerverwaltung und sind selbsterklärend.</dd>
    <dt><code>set password for user {0} to {1}</code></dt>
    <dd>Mit Hilfe dieses Befehls kann das Passwort eines Benutzers direkt über die Kommandozeile gesetzt werden.
    Voraussetzung ist, dass die notwendigen Privilegien vorliegen.</dd>
    <dt><code>enable user {0}</code></dt>
    <dd></dd>
    <dt><code>disable user {0}</code></dt>
    <dd>Mit Hilfe dieser Kommandos können einzelne Benutzer temporär deaktiviert und wieder aktiviert werden.
    Ist ein Benutzer disabled, so kann er oder sie sich nicht mehr am System anmelden.</dd>
    <dt><code>add user {0} as member to group {1}</code></dt>
    <dd></dd>
    <dt><code>remove user {0} as member from group {1}</code></dt>
    <dd>Mit diesen Kommandos kann direkt auf die Mitgliederlisten von Gruppen zugegriffen werden, indem Mitglieder
    (sowohl Gruppen als auch Benutzer) hinzugefügt oder gelöscht werden können.</dd>
    </dl>
    </section>

    <section>
    <title>Das Sichern und Restaurieren der Benutzerverwaltungsdaten</title>

    <p>
    Während der Initialisierung eines MyCoRe-Systems werden ein Administrations-Account und ein Gastzugang eingerichtet
    zusammen mit den zugehörigen primären Gruppen (siehe <a href="#superuser">Kommando <code>init superuser</code></a>).
    Dadurch ist das Sichern und Reimportieren der gesamten Daten der Benutzerverwaltung mit etwas mehr Handarbeit
    verbunden, weil der Administrations-Account und Gastzugang zwar mit gesichert werden, aber vor einer Restauration der
    Daten z.B. nach einem Crash der SQL-Datenbank neu initialisiert werden müssen. Das bedeutet, dass sie bereits vorhanden sind und
    ein <code>import user data from file</code> deswegen nicht geht. Andererseits können sich die Daten dieser beiden
    Benutzer natürlich auch verändert haben, so dass die alten Daten wieder hergestellt werden müssen. Der folgende
    Ablauf führt zum Ziel. Dabei stehen <code>&lt;superuser&gt;</code> und <code>&lt;superuser-group&gt;</code> bzw.
    <code>&lt;guest&gt;</code> und <code>&lt;guest-group&gt;</code> für die in <code>mycore.private.properties</code>
    eingetragenen Parameter für den Administrations- und Gastzugang. In der MyCoRe-Kommandozeile werden die folgenden
    Befehle durchgeführt:
    </p>

    <source class="code">
<![CDATA[MyCoRe:> export user <superuser> to file <superuser.xml>
MyCoRe:> export user <guest> to file <guest.xml>
MyCoRe:> export group <superuser-group> to file
         <superuser-group.xml>
MyCoRe:> export group <guest-group> to file <guest-group.xml>
MyCoRe:> export all users to file <all-users.xml>
MyCoRe:> export all groups to file <all-groups.xml>]]></source>

    <p>
    Die Benutzer <code>&lt;superuser&gt;</code> und <code>&lt;guest&gt;</code> sowie die zugehörigen Gruppen müssen
    aus den Dateien <code>&lt;all-users.xml&gt;</code> bzw. <code>&lt;all-groups.xml&gt;</code> manuell entfernt
    werden. Dann können alle Daten in einer neu erstellten SQL-Datenbank folgendermaßen importiert werden:
    </p>

    <source class="code">
<![CDATA[MyCoRe:> init superuser
MyCoRe:> import user data from file <all-users.xml>
MyCoRe:> import group data from file <all-groups.xml>
MyCoRe:> update user data from file <superuser.xml>
MyCoRe:> update user data from file <guest.xml>
MyCoRe:> update group data from file <superuser-group.xml>
MyCoRe:> update group data from file <guest-group.xml>
MyCoRe:> check user data consistency]]></source>
   </section>
   </section>

   <section>
    <title>Kommandos zur Administration des ACL-Systems</title>

    <dl class="kasten">
    <dt><code>load permissions data from file {0}</code></dt>
    <dd>Das Kommando lädt statische Permissions aus der Datei {0}.</dd>
    <dt><code>update permission {0} for id {1} with rulefile {2}</code></dt>
    <dd></dd>
    <dt><code>update permission {0} for id {1} with rulefile {2} described by {3}</code></dt>
    <dd></dd>
    <dt><code>update permission {0} for selected with rulefile {2}</code></dt>
    <dd></dd>
    <dt><code>update permission {0} for selected with rulefile {2} described by {3}</code></dt>
    <dd></dd>
    <dt><code>list all permissions</code></dt>
    <dd>Das Kommando listet alle statischen Permissions.</dd>
    <dt><code>delete permissions {0}</code></dt>
    <dd>Das Kommando löscht die in {0} angegebene Permission.</dd>
    <dt><code>delete all permissions</code></dt>
    <dd>Das Kommando löscht alle statischen Permissions.</dd>
    <dt><code>export all permissions to file {0}</code></dt>
    <dd>Das Kommando sichert alle statischen Permissions in die unter {0} angegebene Datei.</dd>
    </dl>
   </section>



</body>
</document>

