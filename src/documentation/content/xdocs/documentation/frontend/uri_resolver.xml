<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">

<document>

  <header>
    <title>Der MyCoRe-URI-Resolver</title>
    <authors>
      <person email="[EMAIL PROTECTED]" name="Thomas Scheffler" />
      <person email="[EMAIL PROTECTED]" name="Wiebke Oeltjen" />
      <person email="[EMAIL PROTECTED]" name="Jens Kupferschmidt" />
    </authors>
    <version>2015-06-16</version>
    <abstract>Der URI-Resolver in MyCoRe ist eine Erweiterung des Standard-URI-Resolvers und gestattet innerhalb der
      MyCoRe-Anwendung den einfachen Zugriff auf interne Komponenten.
    </abstract>
  </header>

  <body>
    <section>
      <title>Der MyCoRe-URI-Resolver</title>
      <p>
        Die Klasse
        <code>org.mycore.common.xml.MCRURIResolver</code>
        implementiert einen Resolver, mit dem an verschiedenen
        Stellen im MyCoRe-System XML-Daten über URI's gelesen
        werden können. Der Resolver wird zur Zeit an vilen Stellen des Layout-Prozesses eingesetzt. Für eigene Ziele
        kann der URI-Resolver auch entsprechend erweitert werden.
      </p>

      <p>Der Resolver unterstützt neben den Schemata des JAVA-URIResolvers die folgenden Schemata bzw. Protokolle:</p>

      <section>
        <title>webapp:[Path]</title>
        <p>
          liest eine statische XML-Datei vom Dateisystem der Web-Applikation. Im Gegensatz zur file()-Methode kann der
          Pfad
          der zu lesenden Datei relativ zum Wurzelverzeichnis der Web-Applikation angegeben werden. Der Zugriff
          erfolgt
          direkt, d.h. ohne HTTP Request oder Anwendung eines Stylesheets.
        </p>
        <p class="break">
          <source><![CDATA[
webapp:{path}]]></source>
        </p>
        <p class="break">
          <source><![CDATA[
webapp:config/labels.xml]]></source>
        </p>
      </section>

      <section>
        <title>request:[Path]</title>
        <p>
          liest eine XML-Datei durch einen HTTP Request an ein Servlet oder Stylesheet innerhalb der aktuellen
          MyCoRe-Anwendung. Im Gegensatz zur http/https Methode ist der Pfad relativ zur Basis-URL der Web-Applikation
          anzugeben, die MCRSessionID wird automatisch als HTTP GET Parameter ergänzt.
        </p>
        <p class="break">
          <source><![CDATA[
request:{path}]]></source>
        </p>
        <p class="break">
          <source><![CDATA[
request:servlets/MCRLinkServlet?
  XSL.Style=xml&amp;form=&amp;to=DocPortal_document_00000001&amp;type=derivate]]></source>
        </p>
      </section>

      <section>
        <title>resource:[Path]</title>
        <p>
          liest eine XML-Datei aus dem CLASSPATH der Web-Applikation, d.h. die Datei wird zunächst im Verzeichnis
          <code>WEB-INF/classes/</code>
          und als nächstes in einer der jar-Dateien im Verzeichnis
          <code>WEB-INF/lib/</code>
          der
          Web-Applikation gesucht. Diese Methode bietet sich an, um statische XML-Dateien zu lesen, die in einer
          jar-Datei
          abgelegt sind.
        </p>
        <p class="break">
          <source><![CDATA[
resource:{path}]]></source>
        </p>
        <p class="break">
          <source><![CDATA[
resource:ContentStoreSelectionRules.xml]]></source>
        </p>
      </section>

      <section>
        <title>session:[Key]</title>
        <p>
          liest ein XML-Element, das als JDOM-Element in der aktuellen MCRSession abgelegt ist. Mittels der
          <code>put()</code>
          Methode der Klasse MCRSession kann analog zu einer Java-Hashtable unter einem Schlüssel ein Objekt abgelegt
          werden.
          Ein Servlet kann so z.B. ein JDOM-Element in der
          <code>MCRSession</code>
          ablegen, den Schlüssel einem Stylesheet
          über einen XSL-Parameter mitteilen. Der MyCoRe Editor kann dieses
          JDOM-Element dann mittels der
          <code>get()</code>
          Methode aus der Session lesen.
        </p>
        <p class="break">
          <source><![CDATA[
session:{key}]]></source>
        </p>
        <p class="break">
          <source><![CDATA[
session:mylist]]></source>
        </p>
        <p>
          Das Beispiel liest das JDOM XML-Element, das als Ergebnis von
          <code>MCRSessionMgr.getCurrentSession().get("mylist");</code>
          zurückgegeben wird.
        </p>
      </section>

      <section>
        <title>mcrobject:[MCRObjectID]</title>
        <p>liest die XML-Darstellung der Metadaten eines MCRObject mit der angegebenen MCRObjectID aus.</p>
        <p class="break">
          <source><![CDATA[
mcrobject:{mcrobjectid}]]></source>
        </p>
        <p class="break">
          <source><![CDATA[
mcrobject:DocPortal_document_07910401]]></source>
        </p>
      </section>

      <section>
        <title>classification:[ClassificationQuery]</title>
        <p>gibt eine Klassifikation in unterschiedlichen Formaten aus.
        </p>
        <p class="break">
          <source><![CDATA[
classification:{editor['['formatAlias']']|editorComplete|metadata}:{Levels}[:noEmptyLeaves]:{parents|children}:{ClassID}[:CategID]]]></source>
        </p>
        <p>Die einzelnen Parameter sind durch Doppelpunkte getrennt.</p>
        <ol>
          <li>
            Der erste Parameter bestimmt den Formattyp der Rückgabe.
            <ul>
              <li>
                <code>editor</code>
                bereitet die Klassifikation für die Nutzung in der Editor-Selectbox auf.Letztere kann für den Label-Text
                noch unterschiedliche Formatanweisungen enthalten, die mit
                <code>formatAlias</code>
                referenziert werden.Das Property
                <code>MCR.UriResolver.classification.format.{formatAlias}</code>
                enthält dann die Formatieranweisung.
                Diese besteht aus beliebigem Text kombiniert mit Platzhaltern:
                <ul>
                  <li>
                    <code>{id}</code>
                    steht für die Kategorie-ID,
                  </li>
                  <li>
                    <code>{count}</code>
                    steht für die Zahl der zugeordneten MyCoRe-Objekte,
                  </li>
                  <li>
                    <code>{text}</code>
                    steht für das Attribut text im label-Tag der Klassifikationsdefinition,
                  </li>
                  <li>
                    <code>{description}</code>
                    steht für das Attribut description im label-Tag der Klassifikationsdefinition.
                  </li>
                </ul>
              </li>
              <li>
                <code>metadata</code>
                gibt die Klassifikation im MyCoRe-XML-Format aus.
              </li>
              <li>
                <code>editorComplete</code>
                bereitet die Klassifikation für die Nutzung in der Editor-Selectbox auf. Dabei wird die für die SOLR
                Suche erforderliche Notation für den
                <em>value</em>
                <code>ClassID:categid</code>
                verwendet.
              </li>
            </ul>
          </li>
          <li>
            <code>Levels</code>
            gibt an, wieviel Hierarchiestufen dargestellt werden. Bei Angabe der CategID ist dies die
            Anzahl der
            Kindkategoriehierarchiestufen. Ist Levels „
            <code>-1</code>
            “ angegeben, so bedeutet dies „komplette
            Hierarchie“.
          </li>
          <li>
            <code>noEmptyLeaves</code>
            ist ein optionaler Parameter. Wenn angegeben, werden leere Kategorien ohne Objekte
            nicht mit ausgegeben.
            Diese Funktion ist nur für den Rückgabetyp
            <code>editor</code>
            bzw.
            <code>editorComplete</code>
            , d.h. sinnvollerweise in Suchmasken,
            implementiert.
          </li>
          <li>
            <code>parents</code>
            oder
            <code>children</code>
            gibt an, ob bei Angabe einer
            <code>CategID</code>
            zusätzlich
            alle übergeordneten Kategorien mit zurückgegeben werden (
            <code>parents</code>
            ) oder ob nur die Kinder der Kategorie
            berücksichtigt werden sollen. Bei Angabe eines positiven Levels und „
            <code>parents</code>
            “ werden sowohl die Eltern
            ausgegeben, wie auch
            <code>{Levels}</code>
            Hierarchieebenen der Kinder.
          </li>
          <li>
            <code>ClassID</code>
            ist die Klassifikations-ID
          </li>
          <li>
            <code>CategID</code>
            ist Kategorie-ID
          </li>
        </ol>
        <p class="break">
          <source><![CDATA[
classification:editor[CountDocument]:2:noEmptyLeaves:children:DocPortal_class_00000002

classification:editorComplete:3:noEmptyLeaves:children:MyCoRe_class_00000001:Categ0003

classification:metadata:0:parents:DocPortal_class_00000001:Unis.Jena]]></source>
        </p>
      </section>

      <section>
        <title>access:[ AccessRules ]</title>
        <p>
          liest die XML-Darstellung der ACL-Metadaten für ein MyCoRe-Objekt aus und gibt diese als XML-Darstellung der
          <code>servacls</code>
          aus.
        </p>
        <p class="break">
          <source><![CDATA[
access:action=[all|{permision}]&amp;object={MCRObjectID}]]></source>
        </p>
        <ul>
          <li>
            Der Parameter
            <code>all</code>
            gibt alle Permissions für das MyCoRe-Object zurück.
          </li>
          <li>
            Für den Parameter
            <code>{permision}</code>
            kann eine relevante Permission angegeben werden.
          </li>
        </ul>
        <p class="break">
          <source><![CDATA[
access:action=all&amp;object=DocPortal_document_07910401

access:action=writedb&amp;object=DocPortal_document_07910401]]></source>
        </p>
      </section>

      <section>
        <title>ifs:[DerivateID]</title>
        <p>
          startet den Abruf der Verzeichnisstruktur eines Derivate-Contents. Derzeit einzige Implementierung ist eine
          <code>mcrdirectory</code>
          -Verzeichnisstruktur im XML-Format.
        </p>
        <p class="break">
          <source><![CDATA[
ifs:{MCRDerivateID}]]></source>
        </p>
        <p class="break">
          <source><![CDATA[
ifs:DocPortal_derivate_00000001]]></source>
        </p>
      </section>

      <section>
        <title>mcrfile:[Path]</title>
        <p>
          liefert eine konkrete Datei aus einem MCRDerivate, welche über den Pfad adressiert ist.
        </p>
        <p class="break">
          <source><![CDATA[
mcrfile:{MCRDerivateID}/{path}]]></source>
        </p>
        <p class="break">
          <source><![CDATA[
file:DocPortal_derivate_00000001/folder1/image2.jpg]]></source>
        </p>
      </section>

      <section>
        <title>language:[Code]</title>
        <p>
          kann verwendet werden, um zwischen verschiedenen Codes für die gleiche Sprache zu konvertieren. Das
          zurückgegebene XML
          enthält die ISO 639-1 und ISO 639-2 Sprachcodes für die angefragte Sprache.
        </p>
        <p class="break">
          <source><![CDATA[
language:{code}]]></source>
        </p>
        <p class="break">
          <source><![CDATA[
language:de

erzeugt folgenden XML-Output:

<language xmlCode="de" biblCode="ger" termCode="deu" />]]></source>
        </p>
      </section>

      <section>
        <title>notnull:[URI]</title>
        <p>
          dieses Vorschaltelement für andere URI stellt sicher, dass es bei Aufruf der genannten URI keine
          NullPointerException gibt. Sollte es bei
          Verarbeitung der
          anhängenden URI eine Exception geben, wird diese
          geloggt. Im Falle einer Exception oder wenn
          die URI den Wert
          NULL
          zurückgibt, liefert dieser Resolver stattdessen
          eine leere XML-Datei. Dies ist z.B.
          hilfreich, um in XSL Stylesheets
          URIs zu verwenden, aber gegen Fehler
          abzusichern.
        </p>
        <p class="break">
          <source><![CDATA[
notnull:{uri}]]></source>
        </p>
        <p class="break">
          <source><![CDATA[
notnull:mcrobject:DocPortal_document_07910401]]></source>
        </p>
      </section>

      <section>
        <title>xslStyle:[stylesheet]:[URI]</title>
        <p>
          dieses Vorschaltelement für andere URI wendet das Stylesheet [stylesheet] auf die XML-Auagabedatei der
          nachfolgenden URI an und gibt das
          Ergebnis als
          XML zurück. Das Stylesheet befindet sich im Classpath der
          Anwendung. Die Extension .xsl entfällt
          im Parameter
          <code>{stylesheet}</code>
          .
        </p>
        <p class="break">
          <source><![CDATA[
xslStyle:{stylesheet}:{uri}]]></source>
        </p>
        <p class="break">
          <source><![CDATA[
xslStyle:document2mods:DocPortal_document_07910401]]></source>
        </p>
      </section>
      
      <p style="color:red;">Dieser Text ist noch in Arbeit!</p>

    </section>

    <section>
      <title>MCRURIResolverFilter</title>
      <p>
        Der MCRURIResolverFilter liefert, bei XML- oder HTML-Output und wenn der
        <em>Log-Level</em>
        von MCRURIResolver auf
        <code>DEBUG</code>
        steht, Debug-Informationen als
        Kommentar im Quelltext, welche URIs während der Erstellung aufgerufen
        worden sind. In der richtigen Reihenfolge und ggf. auch mit Referrer.
        Da er standardmäßig mit eingebunden ist, muss man bis auf besagten
        Log-Level nichts konfigurieren.
      </p>
    </section>

    <section>
      <title>Erweiterung des URI-Resolvers</title>
      <p>
        Unter Umständen kann es nötig sein den URIResolver für eigene Anwendungen zu erweitern. Dabei ist es nicht
        möglich
        vorhandene URI-Schemas zu überschreiben, jedoch neue den bereits vorhandenen hinzuzufügen. Für jedes
        Schema z.B.
        <code>file</code>
        gibt es einen Resolver, der entsprechende URIs auflösen kann. Dieser Resolver muss die
        Schnittstelle
        <code>MCRURIResolver.MCRResolver</code>
        im Paket
        <code>org.mycore.common.xml</code>
        implementieren.
        Für die Zuweisung eines Schemas zur
        <code>MCRResolver</code>
        -Implementierung ist der
        <code>MCRResolverProvider</code>
        verantwortlich, der diese Schnittstelle aus
        <code>MCRURIResolver</code>
        implementiert. Letzterer stellt eine Abbildung von Schema-Strings zu
        <code>MCRResolver</code>
        -Instanzen zur
        Verfügung. Der
        <code>MCRResolverProvider</code>
        kann also beliebig viele
        <code>MCRResolver</code>
        zu den bereits
        in MyCoRe integrierten hinzufügen. Eingebunden wird ein zusätzlicher
        <code>MCRResolverProvider</code>
        mittels
        folgendem Property:
      </p>
      <p class="kasten">MCR.UriResolver.externalResolver.class = &lt;voller Klassenname&gt;</p>
    </section>
  </body>
</document>

